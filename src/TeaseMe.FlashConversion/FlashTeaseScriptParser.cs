//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 FlashTeaseScript.g 2012-01-11 00:11:54

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections;
using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace TeaseMe.FlashConversion
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class FlashTeaseScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACTION", "BUTTON", "BUTTONS", "CAP", "DELAY", "FROM", "GO", "HIDDEN", "ID", "INTEGER", "LETTERS", "MIN", "MULT", "NO", "NORMAL", "PAGE", "PIC", "PREFIX", "PROPERTIES", "RANGE", "SEC", "SECRET", "SET", "SOUND", "STRING", "STYLE", "TARGET", "TEXT", "TIME", "TO", "UNSET", "WS", "YES", "YN", "'#'", "')'", "','", "',cap'", "':'", "'action'", "'action:'", "'buttons('", "'delay('", "'e'", "'from:'", "'go('", "'hidden:'", "'instruc:'", "'media:'", "'mult('", "'no:'", "'page('", "'pic(id:'", "'range('", "'set('", "'sound(id:'", "'style:'", "'target'", "'target:'", "'text:'", "'time:'", "'to:'", "'unset('", "'vert('", "'yes:'", "'yn('"
	};
	public const int EOF=-1;
	public const int ACTION=4;
	public const int BUTTON=5;
	public const int BUTTONS=6;
	public const int CAP=7;
	public const int DELAY=8;
	public const int FROM=9;
	public const int GO=10;
	public const int HIDDEN=11;
	public const int ID=12;
	public const int INTEGER=13;
	public const int LETTERS=14;
	public const int MIN=15;
	public const int MULT=16;
	public const int NO=17;
	public const int NORMAL=18;
	public const int PAGE=19;
	public const int PIC=20;
	public const int PREFIX=21;
	public const int PROPERTIES=22;
	public const int RANGE=23;
	public const int SEC=24;
	public const int SECRET=25;
	public const int SET=26;
	public const int SOUND=27;
	public const int STRING=28;
	public const int STYLE=29;
	public const int TARGET=30;
	public const int TEXT=31;
	public const int TIME=32;
	public const int TO=33;
	public const int UNSET=34;
	public const int WS=35;
	public const int YES=36;
	public const int YN=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;

	// delegates
	// delegators

	public FlashTeaseScriptParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public FlashTeaseScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return FlashTeaseScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "FlashTeaseScript.g"; } }


	ArrayList exceptions = new ArrayList();

	public override void ReportError(RecognitionException e)
	{
	    exceptions.Add(e);
	}

	public bool HasError
	{
		get { return exceptions.Count > 0; }
	}

	public string ErrorMessage
	{
		get { return this.GetErrorMessage(exceptions[0] as RecognitionException, this.TokenNames); }
	}

	public string ErrorPosition
	{
		get { return this.GetErrorHeader(exceptions[0] as RecognitionException); }
	}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class tease_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tease_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_tease();
	partial void LeaveRule_tease();

	// $ANTLR start "tease"
	// FlashTeaseScript.g:76:8: public tease : ( page )* ;
	[GrammarRule("tease")]
	public FlashTeaseScriptParser.tease_return tease()
	{
		EnterRule_tease();
		EnterRule("tease", 1);
		TraceIn("tease", 1);
		FlashTeaseScriptParser.tease_return retval = new FlashTeaseScriptParser.tease_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		FlashTeaseScriptParser.page_return page1 = default(FlashTeaseScriptParser.page_return);


		try { DebugEnterRule(GrammarFileName, "tease");
		DebugLocation(76, 1);
		try
		{
			// FlashTeaseScript.g:77:2: ( ( page )* )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:77:4: ( page )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(77, 4);
			// FlashTeaseScript.g:77:4: ( page )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>=INTEGER && LA1_0<=LETTERS)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:77:4: page
					{
					DebugLocation(77, 4);
					PushFollow(Follow._page_in_tease201);
					page1=page();
					PopFollow();

					adaptor.AddChild(root_0, page1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tease", 1);
			LeaveRule("tease", 1);
			LeaveRule_tease();
		}
		DebugLocation(78, 1);
		} finally { DebugExitRule(GrammarFileName, "tease"); }
		return retval;

	}
	// $ANTLR end "tease"

	private sealed partial class page_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public page_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_page();
	partial void LeaveRule_page();

	// $ANTLR start "page"
	// FlashTeaseScript.g:80:1: page : pageRef 'page(' ( pageProperties )? ')' -> ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? ) ;
	[GrammarRule("page")]
	private FlashTeaseScriptParser.page_return page()
	{
		EnterRule_page();
		EnterRule("page", 2);
		TraceIn("page", 2);
		FlashTeaseScriptParser.page_return retval = new FlashTeaseScriptParser.page_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal3 = default(CommonToken);
		CommonToken char_literal5 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef2 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.pageProperties_return pageProperties4 = default(FlashTeaseScriptParser.pageProperties_return);

		CommonTree string_literal3_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_pageRef=new RewriteRuleSubtreeStream(adaptor,"rule pageRef");
		RewriteRuleSubtreeStream stream_pageProperties=new RewriteRuleSubtreeStream(adaptor,"rule pageProperties");
		try { DebugEnterRule(GrammarFileName, "page");
		DebugLocation(80, 1);
		try
		{
			// FlashTeaseScript.g:81:2: ( pageRef 'page(' ( pageProperties )? ')' -> ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:81:4: pageRef 'page(' ( pageProperties )? ')'
			{
			DebugLocation(81, 4);
			PushFollow(Follow._pageRef_in_page213);
			pageRef2=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef2.Tree);
			DebugLocation(81, 12);
			string_literal3=(CommonToken)Match(input,55,Follow._55_in_page215);  
			stream_55.Add(string_literal3);

			DebugLocation(81, 20);
			// FlashTeaseScript.g:81:20: ( pageProperties )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==44||LA2_0==47||(LA2_0>=50 && LA2_0<=52)||LA2_0==63))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:81:20: pageProperties
				{
				DebugLocation(81, 20);
				PushFollow(Follow._pageProperties_in_page217);
				pageProperties4=pageProperties();
				PopFollow();

				stream_pageProperties.Add(pageProperties4.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(81, 36);
			char_literal5=(CommonToken)Match(input,39,Follow._39_in_page220);  
			stream_39.Add(char_literal5);



			{
			// AST REWRITE
			// elements: pageRef, pageProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 82:3: -> ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? )
			{
				DebugLocation(82, 6);
				// FlashTeaseScript.g:82:6: ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(82, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PAGE, "PAGE"), root_1);

				DebugLocation(82, 13);
				adaptor.AddChild(root_1, stream_pageRef.NextTree());
				DebugLocation(82, 21);
				// FlashTeaseScript.g:82:21: ( ^( PROPERTIES pageProperties ) )?
				if (stream_pageProperties.HasNext)
				{
					DebugLocation(82, 21);
					// FlashTeaseScript.g:82:21: ^( PROPERTIES pageProperties )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(82, 23);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTIES, "PROPERTIES"), root_2);

					DebugLocation(82, 34);
					adaptor.AddChild(root_2, stream_pageProperties.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_pageProperties.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("page", 2);
			LeaveRule("page", 2);
			LeaveRule_page();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "page"); }
		return retval;

	}
	// $ANTLR end "page"

	private sealed partial class pageProperties_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageProperties_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageProperties();
	partial void LeaveRule_pageProperties();

	// $ANTLR start "pageProperties"
	// FlashTeaseScript.g:85:1: pageProperties : pageProp ( ',' pageProp )* -> ( pageProp )+ ;
	[GrammarRule("pageProperties")]
	private FlashTeaseScriptParser.pageProperties_return pageProperties()
	{
		EnterRule_pageProperties();
		EnterRule("pageProperties", 3);
		TraceIn("pageProperties", 3);
		FlashTeaseScriptParser.pageProperties_return retval = new FlashTeaseScriptParser.pageProperties_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal7 = default(CommonToken);
		FlashTeaseScriptParser.pageProp_return pageProp6 = default(FlashTeaseScriptParser.pageProp_return);
		FlashTeaseScriptParser.pageProp_return pageProp8 = default(FlashTeaseScriptParser.pageProp_return);

		CommonTree char_literal7_tree = default(CommonTree);
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_pageProp=new RewriteRuleSubtreeStream(adaptor,"rule pageProp");
		try { DebugEnterRule(GrammarFileName, "pageProperties");
		DebugLocation(85, 1);
		try
		{
			// FlashTeaseScript.g:86:2: ( pageProp ( ',' pageProp )* -> ( pageProp )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:86:4: pageProp ( ',' pageProp )*
			{
			DebugLocation(86, 4);
			PushFollow(Follow._pageProp_in_pageProperties249);
			pageProp6=pageProp();
			PopFollow();

			stream_pageProp.Add(pageProp6.Tree);
			DebugLocation(86, 13);
			// FlashTeaseScript.g:86:13: ( ',' pageProp )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==40))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:86:14: ',' pageProp
					{
					DebugLocation(86, 14);
					char_literal7=(CommonToken)Match(input,40,Follow._40_in_pageProperties252);  
					stream_40.Add(char_literal7);

					DebugLocation(86, 18);
					PushFollow(Follow._pageProp_in_pageProperties254);
					pageProp8=pageProp();
					PopFollow();

					stream_pageProp.Add(pageProp8.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: pageProp
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 87:3: -> ( pageProp )+
			{
				DebugLocation(87, 6);
				if (!(stream_pageProp.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_pageProp.HasNext )
				{
					DebugLocation(87, 6);
					adaptor.AddChild(root_0, stream_pageProp.NextTree());

				}
				stream_pageProp.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageProperties", 3);
			LeaveRule("pageProperties", 3);
			LeaveRule_pageProperties();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "pageProperties"); }
		return retval;

	}
	// $ANTLR end "pageProperties"

	private sealed partial class pageProp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageProp_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageProp();
	partial void LeaveRule_pageProp();

	// $ANTLR start "pageProp"
	// FlashTeaseScript.g:90:1: pageProp : ( textDef -> ^( TEXT textDef ) | actionDef );
	[GrammarRule("pageProp")]
	private FlashTeaseScriptParser.pageProp_return pageProp()
	{
		EnterRule_pageProp();
		EnterRule("pageProp", 4);
		TraceIn("pageProp", 4);
		FlashTeaseScriptParser.pageProp_return retval = new FlashTeaseScriptParser.pageProp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		FlashTeaseScriptParser.textDef_return textDef9 = default(FlashTeaseScriptParser.textDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef10 = default(FlashTeaseScriptParser.actionDef_return);

		RewriteRuleSubtreeStream stream_textDef=new RewriteRuleSubtreeStream(adaptor,"rule textDef");
		try { DebugEnterRule(GrammarFileName, "pageProp");
		DebugLocation(90, 1);
		try
		{
			// FlashTeaseScript.g:91:2: ( textDef -> ^( TEXT textDef ) | actionDef )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==63))
			{
				alt4 = 1;
			}
			else if ((LA4_0==44||LA4_0==47||(LA4_0>=50 && LA4_0<=52)))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:91:4: textDef
				{
				DebugLocation(91, 4);
				PushFollow(Follow._textDef_in_pageProp275);
				textDef9=textDef();
				PopFollow();

				stream_textDef.Add(textDef9.Tree);


				{
				// AST REWRITE
				// elements: textDef
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 92:3: -> ^( TEXT textDef )
				{
					DebugLocation(92, 6);
					// FlashTeaseScript.g:92:6: ^( TEXT textDef )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(92, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TEXT, "TEXT"), root_1);

					DebugLocation(92, 13);
					adaptor.AddChild(root_1, stream_textDef.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:93:4: actionDef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(93, 4);
				PushFollow(Follow._actionDef_in_pageProp291);
				actionDef10=actionDef();
				PopFollow();

				adaptor.AddChild(root_0, actionDef10.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageProp", 4);
			LeaveRule("pageProp", 4);
			LeaveRule_pageProp();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "pageProp"); }
		return retval;

	}
	// $ANTLR end "pageProp"

	private sealed partial class textDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public textDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_textDef();
	partial void LeaveRule_textDef();

	// $ANTLR start "textDef"
	// FlashTeaseScript.g:96:1: textDef : 'text:' STRING ;
	[GrammarRule("textDef")]
	private FlashTeaseScriptParser.textDef_return textDef()
	{
		EnterRule_textDef();
		EnterRule("textDef", 5);
		TraceIn("textDef", 5);
		FlashTeaseScriptParser.textDef_return retval = new FlashTeaseScriptParser.textDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal11 = default(CommonToken);
		CommonToken STRING12 = default(CommonToken);

		CommonTree string_literal11_tree = default(CommonTree);
		CommonTree STRING12_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "textDef");
		DebugLocation(96, 1);
		try
		{
			// FlashTeaseScript.g:97:2: ( 'text:' STRING )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:97:4: 'text:' STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(97, 11);
			string_literal11=(CommonToken)Match(input,63,Follow._63_in_textDef302); 
			DebugLocation(97, 13);
			STRING12=(CommonToken)Match(input,STRING,Follow._STRING_in_textDef305); 
			STRING12_tree = (CommonTree)adaptor.Create(STRING12);
			adaptor.AddChild(root_0, STRING12_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textDef", 5);
			LeaveRule("textDef", 5);
			LeaveRule_textDef();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "textDef"); }
		return retval;

	}
	// $ANTLR end "textDef"

	private sealed partial class actionDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionDef();
	partial void LeaveRule_actionDef();

	// $ANTLR start "actionDef"
	// FlashTeaseScript.g:100:1: actionDef : actionPrefix ( actionMult | actionVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )? ;
	[GrammarRule("actionDef")]
	private FlashTeaseScriptParser.actionDef_return actionDef()
	{
		EnterRule_actionDef();
		EnterRule("actionDef", 6);
		TraceIn("actionDef", 6);
		FlashTeaseScriptParser.actionDef_return retval = new FlashTeaseScriptParser.actionDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		FlashTeaseScriptParser.actionPrefix_return actionPrefix13 = default(FlashTeaseScriptParser.actionPrefix_return);
		FlashTeaseScriptParser.actionMult_return actionMult14 = default(FlashTeaseScriptParser.actionMult_return);
		FlashTeaseScriptParser.actionVert_return actionVert15 = default(FlashTeaseScriptParser.actionVert_return);
		FlashTeaseScriptParser.actionPic_return actionPic16 = default(FlashTeaseScriptParser.actionPic_return);
		FlashTeaseScriptParser.actionSound_return actionSound17 = default(FlashTeaseScriptParser.actionSound_return);
		FlashTeaseScriptParser.actionGo_return actionGo18 = default(FlashTeaseScriptParser.actionGo_return);
		FlashTeaseScriptParser.actionYn_return actionYn19 = default(FlashTeaseScriptParser.actionYn_return);
		FlashTeaseScriptParser.actionDelay_return actionDelay20 = default(FlashTeaseScriptParser.actionDelay_return);
		FlashTeaseScriptParser.actionButtons_return actionButtons21 = default(FlashTeaseScriptParser.actionButtons_return);
		FlashTeaseScriptParser.actionUnset_return actionUnset22 = default(FlashTeaseScriptParser.actionUnset_return);
		FlashTeaseScriptParser.actionSet_return actionSet23 = default(FlashTeaseScriptParser.actionSet_return);


		try { DebugEnterRule(GrammarFileName, "actionDef");
		DebugLocation(100, 1);
		try
		{
			// FlashTeaseScript.g:101:2: ( actionPrefix ( actionMult | actionVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )? )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:101:4: actionPrefix ( actionMult | actionVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(101, 16);
			PushFollow(Follow._actionPrefix_in_actionDef316);
			actionPrefix13=actionPrefix();
			PopFollow();

			DebugLocation(101, 18);
			// FlashTeaseScript.g:101:18: ( actionMult | actionVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )?
			int alt5=11;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case 53:
				{
				alt5 = 1;
				}
				break;
			case 67:
				{
				alt5 = 2;
				}
				break;
			case 56:
				{
				alt5 = 3;
				}
				break;
			case 59:
				{
				alt5 = 4;
				}
				break;
			case 49:
				{
				alt5 = 5;
				}
				break;
			case 69:
				{
				alt5 = 6;
				}
				break;
			case 46:
				{
				alt5 = 7;
				}
				break;
			case 45:
				{
				alt5 = 8;
				}
				break;
			case 66:
				{
				alt5 = 9;
				}
				break;
			case 58:
				{
				alt5 = 10;
				}
				break;
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:101:19: actionMult
				{
				DebugLocation(101, 19);
				PushFollow(Follow._actionMult_in_actionDef320);
				actionMult14=actionMult();
				PopFollow();

				adaptor.AddChild(root_0, actionMult14.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:101:32: actionVert
				{
				DebugLocation(101, 32);
				PushFollow(Follow._actionVert_in_actionDef324);
				actionVert15=actionVert();
				PopFollow();

				adaptor.AddChild(root_0, actionVert15.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FlashTeaseScript.g:101:45: actionPic
				{
				DebugLocation(101, 45);
				PushFollow(Follow._actionPic_in_actionDef328);
				actionPic16=actionPic();
				PopFollow();

				adaptor.AddChild(root_0, actionPic16.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FlashTeaseScript.g:101:57: actionSound
				{
				DebugLocation(101, 57);
				PushFollow(Follow._actionSound_in_actionDef332);
				actionSound17=actionSound();
				PopFollow();

				adaptor.AddChild(root_0, actionSound17.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FlashTeaseScript.g:101:71: actionGo
				{
				DebugLocation(101, 71);
				PushFollow(Follow._actionGo_in_actionDef336);
				actionGo18=actionGo();
				PopFollow();

				adaptor.AddChild(root_0, actionGo18.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// FlashTeaseScript.g:101:82: actionYn
				{
				DebugLocation(101, 82);
				PushFollow(Follow._actionYn_in_actionDef340);
				actionYn19=actionYn();
				PopFollow();

				adaptor.AddChild(root_0, actionYn19.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// FlashTeaseScript.g:101:93: actionDelay
				{
				DebugLocation(101, 93);
				PushFollow(Follow._actionDelay_in_actionDef344);
				actionDelay20=actionDelay();
				PopFollow();

				adaptor.AddChild(root_0, actionDelay20.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// FlashTeaseScript.g:101:107: actionButtons
				{
				DebugLocation(101, 107);
				PushFollow(Follow._actionButtons_in_actionDef348);
				actionButtons21=actionButtons();
				PopFollow();

				adaptor.AddChild(root_0, actionButtons21.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// FlashTeaseScript.g:101:123: actionUnset
				{
				DebugLocation(101, 123);
				PushFollow(Follow._actionUnset_in_actionDef352);
				actionUnset22=actionUnset();
				PopFollow();

				adaptor.AddChild(root_0, actionUnset22.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// FlashTeaseScript.g:101:137: actionSet
				{
				DebugLocation(101, 137);
				PushFollow(Follow._actionSet_in_actionDef356);
				actionSet23=actionSet();
				PopFollow();

				adaptor.AddChild(root_0, actionSet23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionDef", 6);
			LeaveRule("actionDef", 6);
			LeaveRule_actionDef();
		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "actionDef"); }
		return retval;

	}
	// $ANTLR end "actionDef"

	private sealed partial class actionMult_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionMult_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionMult();
	partial void LeaveRule_actionMult();

	// $ANTLR start "actionMult"
	// FlashTeaseScript.g:104:1: actionMult : 'mult(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ ;
	[GrammarRule("actionMult")]
	private FlashTeaseScriptParser.actionMult_return actionMult()
	{
		EnterRule_actionMult();
		EnterRule("actionMult", 7);
		TraceIn("actionMult", 7);
		FlashTeaseScriptParser.actionMult_return retval = new FlashTeaseScriptParser.actionMult_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal24 = default(CommonToken);
		CommonToken char_literal26 = default(CommonToken);
		CommonToken char_literal28 = default(CommonToken);
		FlashTeaseScriptParser.actionDef_return actionDef25 = default(FlashTeaseScriptParser.actionDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef27 = default(FlashTeaseScriptParser.actionDef_return);

		CommonTree string_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_actionDef=new RewriteRuleSubtreeStream(adaptor,"rule actionDef");
		try { DebugEnterRule(GrammarFileName, "actionMult");
		DebugLocation(104, 1);
		try
		{
			// FlashTeaseScript.g:105:2: ( 'mult(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:105:4: 'mult(' actionDef ( ',' actionDef )* ')'
			{
			DebugLocation(105, 4);
			string_literal24=(CommonToken)Match(input,53,Follow._53_in_actionMult369);  
			stream_53.Add(string_literal24);

			DebugLocation(105, 12);
			PushFollow(Follow._actionDef_in_actionMult371);
			actionDef25=actionDef();
			PopFollow();

			stream_actionDef.Add(actionDef25.Tree);
			DebugLocation(105, 22);
			// FlashTeaseScript.g:105:22: ( ',' actionDef )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==40))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:105:23: ',' actionDef
					{
					DebugLocation(105, 23);
					char_literal26=(CommonToken)Match(input,40,Follow._40_in_actionMult374);  
					stream_40.Add(char_literal26);

					DebugLocation(105, 27);
					PushFollow(Follow._actionDef_in_actionMult376);
					actionDef27=actionDef();
					PopFollow();

					stream_actionDef.Add(actionDef27.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(105, 39);
			char_literal28=(CommonToken)Match(input,39,Follow._39_in_actionMult380);  
			stream_39.Add(char_literal28);



			{
			// AST REWRITE
			// elements: actionDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 106:3: -> ( actionDef )+
			{
				DebugLocation(106, 6);
				if (!(stream_actionDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_actionDef.HasNext )
				{
					DebugLocation(106, 6);
					adaptor.AddChild(root_0, stream_actionDef.NextTree());

				}
				stream_actionDef.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionMult", 7);
			LeaveRule("actionMult", 7);
			LeaveRule_actionMult();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "actionMult"); }
		return retval;

	}
	// $ANTLR end "actionMult"

	private sealed partial class actionVert_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionVert_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionVert();
	partial void LeaveRule_actionVert();

	// $ANTLR start "actionVert"
	// FlashTeaseScript.g:109:1: actionVert : 'vert(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ ;
	[GrammarRule("actionVert")]
	private FlashTeaseScriptParser.actionVert_return actionVert()
	{
		EnterRule_actionVert();
		EnterRule("actionVert", 8);
		TraceIn("actionVert", 8);
		FlashTeaseScriptParser.actionVert_return retval = new FlashTeaseScriptParser.actionVert_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal29 = default(CommonToken);
		CommonToken char_literal31 = default(CommonToken);
		CommonToken char_literal33 = default(CommonToken);
		FlashTeaseScriptParser.actionDef_return actionDef30 = default(FlashTeaseScriptParser.actionDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef32 = default(FlashTeaseScriptParser.actionDef_return);

		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_actionDef=new RewriteRuleSubtreeStream(adaptor,"rule actionDef");
		try { DebugEnterRule(GrammarFileName, "actionVert");
		DebugLocation(109, 1);
		try
		{
			// FlashTeaseScript.g:110:2: ( 'vert(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:110:4: 'vert(' actionDef ( ',' actionDef )* ')'
			{
			DebugLocation(110, 4);
			string_literal29=(CommonToken)Match(input,67,Follow._67_in_actionVert399);  
			stream_67.Add(string_literal29);

			DebugLocation(110, 12);
			PushFollow(Follow._actionDef_in_actionVert401);
			actionDef30=actionDef();
			PopFollow();

			stream_actionDef.Add(actionDef30.Tree);
			DebugLocation(110, 22);
			// FlashTeaseScript.g:110:22: ( ',' actionDef )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==40))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:110:23: ',' actionDef
					{
					DebugLocation(110, 23);
					char_literal31=(CommonToken)Match(input,40,Follow._40_in_actionVert404);  
					stream_40.Add(char_literal31);

					DebugLocation(110, 27);
					PushFollow(Follow._actionDef_in_actionVert406);
					actionDef32=actionDef();
					PopFollow();

					stream_actionDef.Add(actionDef32.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(110, 39);
			char_literal33=(CommonToken)Match(input,39,Follow._39_in_actionVert410);  
			stream_39.Add(char_literal33);



			{
			// AST REWRITE
			// elements: actionDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 111:3: -> ( actionDef )+
			{
				DebugLocation(111, 6);
				if (!(stream_actionDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_actionDef.HasNext )
				{
					DebugLocation(111, 6);
					adaptor.AddChild(root_0, stream_actionDef.NextTree());

				}
				stream_actionDef.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionVert", 8);
			LeaveRule("actionVert", 8);
			LeaveRule_actionVert();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "actionVert"); }
		return retval;

	}
	// $ANTLR end "actionVert"

	private sealed partial class actionPrefix_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionPrefix_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionPrefix();
	partial void LeaveRule_actionPrefix();

	// $ANTLR start "actionPrefix"
	// FlashTeaseScript.g:114:1: actionPrefix : ( 'action:' | 'instruc:' | 'hidden:' | 'media:' | 'e' ( options {greedy=false; } :~ ( ':' ) )* ':' );
	[GrammarRule("actionPrefix")]
	private FlashTeaseScriptParser.actionPrefix_return actionPrefix()
	{
		EnterRule_actionPrefix();
		EnterRule("actionPrefix", 9);
		TraceIn("actionPrefix", 9);
		FlashTeaseScriptParser.actionPrefix_return retval = new FlashTeaseScriptParser.actionPrefix_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal34 = default(CommonToken);
		CommonToken string_literal35 = default(CommonToken);
		CommonToken string_literal36 = default(CommonToken);
		CommonToken string_literal37 = default(CommonToken);
		CommonToken char_literal38 = default(CommonToken);
		CommonToken set39 = default(CommonToken);
		CommonToken char_literal40 = default(CommonToken);

		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree string_literal35_tree = default(CommonTree);
		CommonTree string_literal36_tree = default(CommonTree);
		CommonTree string_literal37_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree set39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "actionPrefix");
		DebugLocation(114, 1);
		try
		{
			// FlashTeaseScript.g:115:2: ( 'action:' | 'instruc:' | 'hidden:' | 'media:' | 'e' ( options {greedy=false; } :~ ( ':' ) )* ':' )
			int alt9=5;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 44:
				{
				alt9 = 1;
				}
				break;
			case 51:
				{
				alt9 = 2;
				}
				break;
			case 50:
				{
				alt9 = 3;
				}
				break;
			case 52:
				{
				alt9 = 4;
				}
				break;
			case 47:
				{
				alt9 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:115:4: 'action:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(115, 4);
				string_literal34=(CommonToken)Match(input,44,Follow._44_in_actionPrefix429); 
				string_literal34_tree = (CommonTree)adaptor.Create(string_literal34);
				adaptor.AddChild(root_0, string_literal34_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:116:4: 'instruc:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(116, 4);
				string_literal35=(CommonToken)Match(input,51,Follow._51_in_actionPrefix434); 
				string_literal35_tree = (CommonTree)adaptor.Create(string_literal35);
				adaptor.AddChild(root_0, string_literal35_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FlashTeaseScript.g:117:4: 'hidden:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(117, 4);
				string_literal36=(CommonToken)Match(input,50,Follow._50_in_actionPrefix439); 
				string_literal36_tree = (CommonTree)adaptor.Create(string_literal36);
				adaptor.AddChild(root_0, string_literal36_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FlashTeaseScript.g:118:4: 'media:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(118, 4);
				string_literal37=(CommonToken)Match(input,52,Follow._52_in_actionPrefix444); 
				string_literal37_tree = (CommonTree)adaptor.Create(string_literal37);
				adaptor.AddChild(root_0, string_literal37_tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FlashTeaseScript.g:119:4: 'e' ( options {greedy=false; } :~ ( ':' ) )* ':'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(119, 4);
				char_literal38=(CommonToken)Match(input,47,Follow._47_in_actionPrefix449); 
				char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
				adaptor.AddChild(root_0, char_literal38_tree);

				DebugLocation(119, 8);
				// FlashTeaseScript.g:119:8: ( options {greedy=false; } :~ ( ':' ) )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>=ACTION && LA8_0<=41)||(LA8_0>=43 && LA8_0<=69)))
					{
						alt8 = 1;
					}
					else if ((LA8_0==42))
					{
						alt8 = 2;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// FlashTeaseScript.g:119:37: ~ ( ':' )
						{
						DebugLocation(119, 37);
						set39=(CommonToken)input.LT(1);
						if ((input.LA(1)>=ACTION && input.LA(1)<=41)||(input.LA(1)>=43 && input.LA(1)<=69))
						{
							input.Consume();
							adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set39));
							state.errorRecovery=false;
						}
						else
						{
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(119, 46);
				char_literal40=(CommonToken)Match(input,42,Follow._42_in_actionPrefix470); 
				char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
				adaptor.AddChild(root_0, char_literal40_tree);


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionPrefix", 9);
			LeaveRule("actionPrefix", 9);
			LeaveRule_actionPrefix();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "actionPrefix"); }
		return retval;

	}
	// $ANTLR end "actionPrefix"

	private sealed partial class actionPic_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionPic_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionPic();
	partial void LeaveRule_actionPic();

	// $ANTLR start "actionPic"
	// FlashTeaseScript.g:122:1: actionPic : 'pic(id:' STRING ')' -> ^( PIC STRING ) ;
	[GrammarRule("actionPic")]
	private FlashTeaseScriptParser.actionPic_return actionPic()
	{
		EnterRule_actionPic();
		EnterRule("actionPic", 10);
		TraceIn("actionPic", 10);
		FlashTeaseScriptParser.actionPic_return retval = new FlashTeaseScriptParser.actionPic_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal41 = default(CommonToken);
		CommonToken STRING42 = default(CommonToken);
		CommonToken char_literal43 = default(CommonToken);

		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree STRING42_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");

		try { DebugEnterRule(GrammarFileName, "actionPic");
		DebugLocation(122, 1);
		try
		{
			// FlashTeaseScript.g:123:2: ( 'pic(id:' STRING ')' -> ^( PIC STRING ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:123:4: 'pic(id:' STRING ')'
			{
			DebugLocation(123, 4);
			string_literal41=(CommonToken)Match(input,56,Follow._56_in_actionPic481);  
			stream_56.Add(string_literal41);

			DebugLocation(123, 14);
			STRING42=(CommonToken)Match(input,STRING,Follow._STRING_in_actionPic483);  
			stream_STRING.Add(STRING42);

			DebugLocation(123, 21);
			char_literal43=(CommonToken)Match(input,39,Follow._39_in_actionPic485);  
			stream_39.Add(char_literal43);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 124:3: -> ^( PIC STRING )
			{
				DebugLocation(124, 6);
				// FlashTeaseScript.g:124:6: ^( PIC STRING )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(124, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PIC, "PIC"), root_1);

				DebugLocation(124, 12);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionPic", 10);
			LeaveRule("actionPic", 10);
			LeaveRule_actionPic();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "actionPic"); }
		return retval;

	}
	// $ANTLR end "actionPic"

	private sealed partial class actionSound_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionSound_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionSound();
	partial void LeaveRule_actionSound();

	// $ANTLR start "actionSound"
	// FlashTeaseScript.g:127:1: actionSound : 'sound(id:' STRING ')' -> ^( SOUND STRING ) ;
	[GrammarRule("actionSound")]
	private FlashTeaseScriptParser.actionSound_return actionSound()
	{
		EnterRule_actionSound();
		EnterRule("actionSound", 11);
		TraceIn("actionSound", 11);
		FlashTeaseScriptParser.actionSound_return retval = new FlashTeaseScriptParser.actionSound_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal44 = default(CommonToken);
		CommonToken STRING45 = default(CommonToken);
		CommonToken char_literal46 = default(CommonToken);

		CommonTree string_literal44_tree = default(CommonTree);
		CommonTree STRING45_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");

		try { DebugEnterRule(GrammarFileName, "actionSound");
		DebugLocation(127, 1);
		try
		{
			// FlashTeaseScript.g:128:2: ( 'sound(id:' STRING ')' -> ^( SOUND STRING ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:128:4: 'sound(id:' STRING ')'
			{
			DebugLocation(128, 4);
			string_literal44=(CommonToken)Match(input,59,Follow._59_in_actionSound507);  
			stream_59.Add(string_literal44);

			DebugLocation(128, 16);
			STRING45=(CommonToken)Match(input,STRING,Follow._STRING_in_actionSound509);  
			stream_STRING.Add(STRING45);

			DebugLocation(128, 23);
			char_literal46=(CommonToken)Match(input,39,Follow._39_in_actionSound511);  
			stream_39.Add(char_literal46);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 129:3: -> ^( SOUND STRING )
			{
				DebugLocation(129, 6);
				// FlashTeaseScript.g:129:6: ^( SOUND STRING )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(129, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SOUND, "SOUND"), root_1);

				DebugLocation(129, 14);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionSound", 11);
			LeaveRule("actionSound", 11);
			LeaveRule_actionSound();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "actionSound"); }
		return retval;

	}
	// $ANTLR end "actionSound"

	private sealed partial class actionGo_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionGo_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionGo();
	partial void LeaveRule_actionGo();

	// $ANTLR start "actionGo"
	// FlashTeaseScript.g:132:1: actionGo : 'go(' targetDef ')' -> ^( GO targetDef ) ;
	[GrammarRule("actionGo")]
	private FlashTeaseScriptParser.actionGo_return actionGo()
	{
		EnterRule_actionGo();
		EnterRule("actionGo", 12);
		TraceIn("actionGo", 12);
		FlashTeaseScriptParser.actionGo_return retval = new FlashTeaseScriptParser.actionGo_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal47 = default(CommonToken);
		CommonToken char_literal49 = default(CommonToken);
		FlashTeaseScriptParser.targetDef_return targetDef48 = default(FlashTeaseScriptParser.targetDef_return);

		CommonTree string_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		RewriteRuleITokenStream stream_49=new RewriteRuleITokenStream(adaptor,"token 49");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_targetDef=new RewriteRuleSubtreeStream(adaptor,"rule targetDef");
		try { DebugEnterRule(GrammarFileName, "actionGo");
		DebugLocation(132, 1);
		try
		{
			// FlashTeaseScript.g:133:2: ( 'go(' targetDef ')' -> ^( GO targetDef ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:133:4: 'go(' targetDef ')'
			{
			DebugLocation(133, 4);
			string_literal47=(CommonToken)Match(input,49,Follow._49_in_actionGo532);  
			stream_49.Add(string_literal47);

			DebugLocation(133, 10);
			PushFollow(Follow._targetDef_in_actionGo534);
			targetDef48=targetDef();
			PopFollow();

			stream_targetDef.Add(targetDef48.Tree);
			DebugLocation(133, 20);
			char_literal49=(CommonToken)Match(input,39,Follow._39_in_actionGo536);  
			stream_39.Add(char_literal49);



			{
			// AST REWRITE
			// elements: targetDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 134:3: -> ^( GO targetDef )
			{
				DebugLocation(134, 6);
				// FlashTeaseScript.g:134:6: ^( GO targetDef )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(134, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GO, "GO"), root_1);

				DebugLocation(134, 11);
				adaptor.AddChild(root_1, stream_targetDef.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionGo", 12);
			LeaveRule("actionGo", 12);
			LeaveRule_actionGo();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "actionGo"); }
		return retval;

	}
	// $ANTLR end "actionGo"

	private sealed partial class actionYn_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionYn_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionYn();
	partial void LeaveRule_actionYn();

	// $ANTLR start "actionYn"
	// FlashTeaseScript.g:137:1: actionYn : 'yn(' 'yes:' pageRef ',' 'no:' pageRef ')' -> ^( YN ^( YES pageRef ) ^( NO pageRef ) ) ;
	[GrammarRule("actionYn")]
	private FlashTeaseScriptParser.actionYn_return actionYn()
	{
		EnterRule_actionYn();
		EnterRule("actionYn", 13);
		TraceIn("actionYn", 13);
		FlashTeaseScriptParser.actionYn_return retval = new FlashTeaseScriptParser.actionYn_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal50 = default(CommonToken);
		CommonToken string_literal51 = default(CommonToken);
		CommonToken char_literal53 = default(CommonToken);
		CommonToken string_literal54 = default(CommonToken);
		CommonToken char_literal56 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef52 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.pageRef_return pageRef55 = default(FlashTeaseScriptParser.pageRef_return);

		CommonTree string_literal50_tree = default(CommonTree);
		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_pageRef=new RewriteRuleSubtreeStream(adaptor,"rule pageRef");
		try { DebugEnterRule(GrammarFileName, "actionYn");
		DebugLocation(137, 1);
		try
		{
			// FlashTeaseScript.g:138:2: ( 'yn(' 'yes:' pageRef ',' 'no:' pageRef ')' -> ^( YN ^( YES pageRef ) ^( NO pageRef ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:138:4: 'yn(' 'yes:' pageRef ',' 'no:' pageRef ')'
			{
			DebugLocation(138, 4);
			string_literal50=(CommonToken)Match(input,69,Follow._69_in_actionYn557);  
			stream_69.Add(string_literal50);

			DebugLocation(138, 10);
			string_literal51=(CommonToken)Match(input,68,Follow._68_in_actionYn559);  
			stream_68.Add(string_literal51);

			DebugLocation(138, 17);
			PushFollow(Follow._pageRef_in_actionYn561);
			pageRef52=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef52.Tree);
			DebugLocation(138, 25);
			char_literal53=(CommonToken)Match(input,40,Follow._40_in_actionYn563);  
			stream_40.Add(char_literal53);

			DebugLocation(138, 30);
			string_literal54=(CommonToken)Match(input,54,Follow._54_in_actionYn566);  
			stream_54.Add(string_literal54);

			DebugLocation(138, 36);
			PushFollow(Follow._pageRef_in_actionYn568);
			pageRef55=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef55.Tree);
			DebugLocation(138, 44);
			char_literal56=(CommonToken)Match(input,39,Follow._39_in_actionYn570);  
			stream_39.Add(char_literal56);



			{
			// AST REWRITE
			// elements: pageRef, pageRef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 139:3: -> ^( YN ^( YES pageRef ) ^( NO pageRef ) )
			{
				DebugLocation(139, 6);
				// FlashTeaseScript.g:139:6: ^( YN ^( YES pageRef ) ^( NO pageRef ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(139, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(YN, "YN"), root_1);

				DebugLocation(139, 11);
				// FlashTeaseScript.g:139:11: ^( YES pageRef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(139, 13);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(YES, "YES"), root_2);

				DebugLocation(139, 17);
				adaptor.AddChild(root_2, stream_pageRef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(139, 26);
				// FlashTeaseScript.g:139:26: ^( NO pageRef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(139, 28);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NO, "NO"), root_2);

				DebugLocation(139, 31);
				adaptor.AddChild(root_2, stream_pageRef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionYn", 13);
			LeaveRule("actionYn", 13);
			LeaveRule_actionYn();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "actionYn"); }
		return retval;

	}
	// $ANTLR end "actionYn"

	private sealed partial class actionDelay_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionDelay_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionDelay();
	partial void LeaveRule_actionDelay();

	// $ANTLR start "actionDelay"
	// FlashTeaseScript.g:142:1: actionDelay : 'delay(' timeDef ( ',' targetDef )? ( ',' styleDef )? ')' -> ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) ) ;
	[GrammarRule("actionDelay")]
	private FlashTeaseScriptParser.actionDelay_return actionDelay()
	{
		EnterRule_actionDelay();
		EnterRule("actionDelay", 14);
		TraceIn("actionDelay", 14);
		FlashTeaseScriptParser.actionDelay_return retval = new FlashTeaseScriptParser.actionDelay_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal57 = default(CommonToken);
		CommonToken char_literal59 = default(CommonToken);
		CommonToken char_literal61 = default(CommonToken);
		CommonToken char_literal63 = default(CommonToken);
		FlashTeaseScriptParser.timeDef_return timeDef58 = default(FlashTeaseScriptParser.timeDef_return);
		FlashTeaseScriptParser.targetDef_return targetDef60 = default(FlashTeaseScriptParser.targetDef_return);
		FlashTeaseScriptParser.styleDef_return styleDef62 = default(FlashTeaseScriptParser.styleDef_return);

		CommonTree string_literal57_tree = default(CommonTree);
		CommonTree char_literal59_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_timeDef=new RewriteRuleSubtreeStream(adaptor,"rule timeDef");
		RewriteRuleSubtreeStream stream_targetDef=new RewriteRuleSubtreeStream(adaptor,"rule targetDef");
		RewriteRuleSubtreeStream stream_styleDef=new RewriteRuleSubtreeStream(adaptor,"rule styleDef");
		try { DebugEnterRule(GrammarFileName, "actionDelay");
		DebugLocation(142, 1);
		try
		{
			// FlashTeaseScript.g:143:2: ( 'delay(' timeDef ( ',' targetDef )? ( ',' styleDef )? ')' -> ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:143:4: 'delay(' timeDef ( ',' targetDef )? ( ',' styleDef )? ')'
			{
			DebugLocation(143, 4);
			string_literal57=(CommonToken)Match(input,46,Follow._46_in_actionDelay601);  
			stream_46.Add(string_literal57);

			DebugLocation(143, 13);
			PushFollow(Follow._timeDef_in_actionDelay603);
			timeDef58=timeDef();
			PopFollow();

			stream_timeDef.Add(timeDef58.Tree);
			DebugLocation(143, 21);
			// FlashTeaseScript.g:143:21: ( ',' targetDef )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==40))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==62))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:143:22: ',' targetDef
				{
				DebugLocation(143, 22);
				char_literal59=(CommonToken)Match(input,40,Follow._40_in_actionDelay606);  
				stream_40.Add(char_literal59);

				DebugLocation(143, 26);
				PushFollow(Follow._targetDef_in_actionDelay608);
				targetDef60=targetDef();
				PopFollow();

				stream_targetDef.Add(targetDef60.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(143, 38);
			// FlashTeaseScript.g:143:38: ( ',' styleDef )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==40))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:143:39: ',' styleDef
				{
				DebugLocation(143, 39);
				char_literal61=(CommonToken)Match(input,40,Follow._40_in_actionDelay613);  
				stream_40.Add(char_literal61);

				DebugLocation(143, 43);
				PushFollow(Follow._styleDef_in_actionDelay615);
				styleDef62=styleDef();
				PopFollow();

				stream_styleDef.Add(styleDef62.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(143, 54);
			char_literal63=(CommonToken)Match(input,39,Follow._39_in_actionDelay619);  
			stream_39.Add(char_literal63);



			{
			// AST REWRITE
			// elements: timeDef, targetDef, styleDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 144:3: -> ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) )
			{
				DebugLocation(144, 6);
				// FlashTeaseScript.g:144:6: ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELAY, "DELAY"), root_1);

				DebugLocation(144, 14);
				// FlashTeaseScript.g:144:14: ^( TIME timeDef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 16);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TIME, "TIME"), root_2);

				DebugLocation(144, 21);
				adaptor.AddChild(root_2, stream_timeDef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(144, 30);
				// FlashTeaseScript.g:144:30: ^( TARGET targetDef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 32);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TARGET, "TARGET"), root_2);

				DebugLocation(144, 39);
				adaptor.AddChild(root_2, stream_targetDef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(144, 50);
				// FlashTeaseScript.g:144:50: ^( STYLE ( styleDef )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 52);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STYLE, "STYLE"), root_2);

				DebugLocation(144, 58);
				// FlashTeaseScript.g:144:58: ( styleDef )?
				if (stream_styleDef.HasNext)
				{
					DebugLocation(144, 58);
					adaptor.AddChild(root_2, stream_styleDef.NextTree());

				}
				stream_styleDef.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionDelay", 14);
			LeaveRule("actionDelay", 14);
			LeaveRule_actionDelay();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "actionDelay"); }
		return retval;

	}
	// $ANTLR end "actionDelay"

	private sealed partial class actionButtons_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionButtons_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionButtons();
	partial void LeaveRule_actionButtons();

	// $ANTLR start "actionButtons"
	// FlashTeaseScript.g:147:1: actionButtons : 'buttons(' buttonSeq ')' -> ^( BUTTONS buttonSeq ) ;
	[GrammarRule("actionButtons")]
	private FlashTeaseScriptParser.actionButtons_return actionButtons()
	{
		EnterRule_actionButtons();
		EnterRule("actionButtons", 15);
		TraceIn("actionButtons", 15);
		FlashTeaseScriptParser.actionButtons_return retval = new FlashTeaseScriptParser.actionButtons_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal64 = default(CommonToken);
		CommonToken char_literal66 = default(CommonToken);
		FlashTeaseScriptParser.buttonSeq_return buttonSeq65 = default(FlashTeaseScriptParser.buttonSeq_return);

		CommonTree string_literal64_tree = default(CommonTree);
		CommonTree char_literal66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_buttonSeq=new RewriteRuleSubtreeStream(adaptor,"rule buttonSeq");
		try { DebugEnterRule(GrammarFileName, "actionButtons");
		DebugLocation(147, 1);
		try
		{
			// FlashTeaseScript.g:148:2: ( 'buttons(' buttonSeq ')' -> ^( BUTTONS buttonSeq ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:148:4: 'buttons(' buttonSeq ')'
			{
			DebugLocation(148, 4);
			string_literal64=(CommonToken)Match(input,45,Follow._45_in_actionButtons658);  
			stream_45.Add(string_literal64);

			DebugLocation(148, 15);
			PushFollow(Follow._buttonSeq_in_actionButtons660);
			buttonSeq65=buttonSeq();
			PopFollow();

			stream_buttonSeq.Add(buttonSeq65.Tree);
			DebugLocation(148, 25);
			char_literal66=(CommonToken)Match(input,39,Follow._39_in_actionButtons662);  
			stream_39.Add(char_literal66);



			{
			// AST REWRITE
			// elements: buttonSeq
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 149:3: -> ^( BUTTONS buttonSeq )
			{
				DebugLocation(149, 6);
				// FlashTeaseScript.g:149:6: ^( BUTTONS buttonSeq )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(149, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUTTONS, "BUTTONS"), root_1);

				DebugLocation(149, 16);
				adaptor.AddChild(root_1, stream_buttonSeq.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionButtons", 15);
			LeaveRule("actionButtons", 15);
			LeaveRule_actionButtons();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "actionButtons"); }
		return retval;

	}
	// $ANTLR end "actionButtons"

	private sealed partial class buttonSeq_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public buttonSeq_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_buttonSeq();
	partial void LeaveRule_buttonSeq();

	// $ANTLR start "buttonSeq"
	// FlashTeaseScript.g:152:1: buttonSeq : buttonDef ( ',' buttonDef )* -> ( buttonDef )+ ;
	[GrammarRule("buttonSeq")]
	private FlashTeaseScriptParser.buttonSeq_return buttonSeq()
	{
		EnterRule_buttonSeq();
		EnterRule("buttonSeq", 16);
		TraceIn("buttonSeq", 16);
		FlashTeaseScriptParser.buttonSeq_return retval = new FlashTeaseScriptParser.buttonSeq_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal68 = default(CommonToken);
		FlashTeaseScriptParser.buttonDef_return buttonDef67 = default(FlashTeaseScriptParser.buttonDef_return);
		FlashTeaseScriptParser.buttonDef_return buttonDef69 = default(FlashTeaseScriptParser.buttonDef_return);

		CommonTree char_literal68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_buttonDef=new RewriteRuleSubtreeStream(adaptor,"rule buttonDef");
		try { DebugEnterRule(GrammarFileName, "buttonSeq");
		DebugLocation(152, 1);
		try
		{
			// FlashTeaseScript.g:153:2: ( buttonDef ( ',' buttonDef )* -> ( buttonDef )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:153:4: buttonDef ( ',' buttonDef )*
			{
			DebugLocation(153, 4);
			PushFollow(Follow._buttonDef_in_buttonSeq683);
			buttonDef67=buttonDef();
			PopFollow();

			stream_buttonDef.Add(buttonDef67.Tree);
			DebugLocation(153, 14);
			// FlashTeaseScript.g:153:14: ( ',' buttonDef )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==40))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:153:15: ',' buttonDef
					{
					DebugLocation(153, 15);
					char_literal68=(CommonToken)Match(input,40,Follow._40_in_buttonSeq686);  
					stream_40.Add(char_literal68);

					DebugLocation(153, 19);
					PushFollow(Follow._buttonDef_in_buttonSeq688);
					buttonDef69=buttonDef();
					PopFollow();

					stream_buttonDef.Add(buttonDef69.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }



			{
			// AST REWRITE
			// elements: buttonDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 154:3: -> ( buttonDef )+
			{
				DebugLocation(154, 6);
				if (!(stream_buttonDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_buttonDef.HasNext )
				{
					DebugLocation(154, 6);
					adaptor.AddChild(root_0, stream_buttonDef.NextTree());

				}
				stream_buttonDef.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("buttonSeq", 16);
			LeaveRule("buttonSeq", 16);
			LeaveRule_buttonSeq();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "buttonSeq"); }
		return retval;

	}
	// $ANTLR end "buttonSeq"

	private sealed partial class buttonDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public buttonDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_buttonDef();
	partial void LeaveRule_buttonDef();

	// $ANTLR start "buttonDef"
	// FlashTeaseScript.g:157:1: buttonDef : 'target' INTEGER ':' pageRef ',cap' INTEGER ':' STRING -> ^( BUTTON ^( TARGET pageRef ) ^( CAP STRING ) ) ;
	[GrammarRule("buttonDef")]
	private FlashTeaseScriptParser.buttonDef_return buttonDef()
	{
		EnterRule_buttonDef();
		EnterRule("buttonDef", 17);
		TraceIn("buttonDef", 17);
		FlashTeaseScriptParser.buttonDef_return retval = new FlashTeaseScriptParser.buttonDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal70 = default(CommonToken);
		CommonToken INTEGER71 = default(CommonToken);
		CommonToken char_literal72 = default(CommonToken);
		CommonToken string_literal74 = default(CommonToken);
		CommonToken INTEGER75 = default(CommonToken);
		CommonToken char_literal76 = default(CommonToken);
		CommonToken STRING77 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef73 = default(FlashTeaseScriptParser.pageRef_return);

		CommonTree string_literal70_tree = default(CommonTree);
		CommonTree INTEGER71_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree INTEGER75_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		CommonTree STRING77_tree = default(CommonTree);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_INTEGER=new RewriteRuleITokenStream(adaptor,"token INTEGER");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_pageRef=new RewriteRuleSubtreeStream(adaptor,"rule pageRef");
		try { DebugEnterRule(GrammarFileName, "buttonDef");
		DebugLocation(157, 1);
		try
		{
			// FlashTeaseScript.g:158:2: ( 'target' INTEGER ':' pageRef ',cap' INTEGER ':' STRING -> ^( BUTTON ^( TARGET pageRef ) ^( CAP STRING ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:158:4: 'target' INTEGER ':' pageRef ',cap' INTEGER ':' STRING
			{
			DebugLocation(158, 4);
			string_literal70=(CommonToken)Match(input,61,Follow._61_in_buttonDef708);  
			stream_61.Add(string_literal70);

			DebugLocation(158, 13);
			INTEGER71=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_buttonDef710);  
			stream_INTEGER.Add(INTEGER71);

			DebugLocation(158, 21);
			char_literal72=(CommonToken)Match(input,42,Follow._42_in_buttonDef712);  
			stream_42.Add(char_literal72);

			DebugLocation(158, 25);
			PushFollow(Follow._pageRef_in_buttonDef714);
			pageRef73=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef73.Tree);
			DebugLocation(158, 33);
			string_literal74=(CommonToken)Match(input,41,Follow._41_in_buttonDef716);  
			stream_41.Add(string_literal74);

			DebugLocation(158, 40);
			INTEGER75=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_buttonDef718);  
			stream_INTEGER.Add(INTEGER75);

			DebugLocation(158, 48);
			char_literal76=(CommonToken)Match(input,42,Follow._42_in_buttonDef720);  
			stream_42.Add(char_literal76);

			DebugLocation(158, 52);
			STRING77=(CommonToken)Match(input,STRING,Follow._STRING_in_buttonDef722);  
			stream_STRING.Add(STRING77);



			{
			// AST REWRITE
			// elements: pageRef, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 159:3: -> ^( BUTTON ^( TARGET pageRef ) ^( CAP STRING ) )
			{
				DebugLocation(159, 6);
				// FlashTeaseScript.g:159:6: ^( BUTTON ^( TARGET pageRef ) ^( CAP STRING ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUTTON, "BUTTON"), root_1);

				DebugLocation(159, 15);
				// FlashTeaseScript.g:159:15: ^( TARGET pageRef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 17);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TARGET, "TARGET"), root_2);

				DebugLocation(159, 24);
				adaptor.AddChild(root_2, stream_pageRef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(159, 33);
				// FlashTeaseScript.g:159:33: ^( CAP STRING )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 35);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAP, "CAP"), root_2);

				DebugLocation(159, 39);
				adaptor.AddChild(root_2, stream_STRING.NextNode());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("buttonDef", 17);
			LeaveRule("buttonDef", 17);
			LeaveRule_buttonDef();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "buttonDef"); }
		return retval;

	}
	// $ANTLR end "buttonDef"

	private sealed partial class actionUnset_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionUnset_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionUnset();
	partial void LeaveRule_actionUnset();

	// $ANTLR start "actionUnset"
	// FlashTeaseScript.g:162:1: actionUnset : 'unset(' actionList ')' -> ^( UNSET actionList ) ;
	[GrammarRule("actionUnset")]
	private FlashTeaseScriptParser.actionUnset_return actionUnset()
	{
		EnterRule_actionUnset();
		EnterRule("actionUnset", 18);
		TraceIn("actionUnset", 18);
		FlashTeaseScriptParser.actionUnset_return retval = new FlashTeaseScriptParser.actionUnset_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal78 = default(CommonToken);
		CommonToken char_literal80 = default(CommonToken);
		FlashTeaseScriptParser.actionList_return actionList79 = default(FlashTeaseScriptParser.actionList_return);

		CommonTree string_literal78_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_actionList=new RewriteRuleSubtreeStream(adaptor,"rule actionList");
		try { DebugEnterRule(GrammarFileName, "actionUnset");
		DebugLocation(162, 1);
		try
		{
			// FlashTeaseScript.g:163:2: ( 'unset(' actionList ')' -> ^( UNSET actionList ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:163:4: 'unset(' actionList ')'
			{
			DebugLocation(163, 4);
			string_literal78=(CommonToken)Match(input,66,Follow._66_in_actionUnset753);  
			stream_66.Add(string_literal78);

			DebugLocation(163, 13);
			PushFollow(Follow._actionList_in_actionUnset755);
			actionList79=actionList();
			PopFollow();

			stream_actionList.Add(actionList79.Tree);
			DebugLocation(163, 24);
			char_literal80=(CommonToken)Match(input,39,Follow._39_in_actionUnset757);  
			stream_39.Add(char_literal80);



			{
			// AST REWRITE
			// elements: actionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 164:3: -> ^( UNSET actionList )
			{
				DebugLocation(164, 6);
				// FlashTeaseScript.g:164:6: ^( UNSET actionList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(164, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNSET, "UNSET"), root_1);

				DebugLocation(164, 15);
				adaptor.AddChild(root_1, stream_actionList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionUnset", 18);
			LeaveRule("actionUnset", 18);
			LeaveRule_actionUnset();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "actionUnset"); }
		return retval;

	}
	// $ANTLR end "actionUnset"

	private sealed partial class actionSet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionSet_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionSet();
	partial void LeaveRule_actionSet();

	// $ANTLR start "actionSet"
	// FlashTeaseScript.g:167:1: actionSet : 'set(' actionList ')' -> ^( SET actionList ) ;
	[GrammarRule("actionSet")]
	private FlashTeaseScriptParser.actionSet_return actionSet()
	{
		EnterRule_actionSet();
		EnterRule("actionSet", 19);
		TraceIn("actionSet", 19);
		FlashTeaseScriptParser.actionSet_return retval = new FlashTeaseScriptParser.actionSet_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal81 = default(CommonToken);
		CommonToken char_literal83 = default(CommonToken);
		FlashTeaseScriptParser.actionList_return actionList82 = default(FlashTeaseScriptParser.actionList_return);

		CommonTree string_literal81_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_actionList=new RewriteRuleSubtreeStream(adaptor,"rule actionList");
		try { DebugEnterRule(GrammarFileName, "actionSet");
		DebugLocation(167, 1);
		try
		{
			// FlashTeaseScript.g:168:2: ( 'set(' actionList ')' -> ^( SET actionList ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:168:4: 'set(' actionList ')'
			{
			DebugLocation(168, 4);
			string_literal81=(CommonToken)Match(input,58,Follow._58_in_actionSet780);  
			stream_58.Add(string_literal81);

			DebugLocation(168, 11);
			PushFollow(Follow._actionList_in_actionSet782);
			actionList82=actionList();
			PopFollow();

			stream_actionList.Add(actionList82.Tree);
			DebugLocation(168, 22);
			char_literal83=(CommonToken)Match(input,39,Follow._39_in_actionSet784);  
			stream_39.Add(char_literal83);



			{
			// AST REWRITE
			// elements: actionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:3: -> ^( SET actionList )
			{
				DebugLocation(169, 6);
				// FlashTeaseScript.g:169:6: ^( SET actionList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SET, "SET"), root_1);

				DebugLocation(169, 13);
				adaptor.AddChild(root_1, stream_actionList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionSet", 19);
			LeaveRule("actionSet", 19);
			LeaveRule_actionSet();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "actionSet"); }
		return retval;

	}
	// $ANTLR end "actionSet"

	private sealed partial class actionList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionList_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionList();
	partial void LeaveRule_actionList();

	// $ANTLR start "actionList"
	// FlashTeaseScript.g:172:1: actionList : actionApply ( ',' actionApply )* -> ( actionApply )+ ;
	[GrammarRule("actionList")]
	private FlashTeaseScriptParser.actionList_return actionList()
	{
		EnterRule_actionList();
		EnterRule("actionList", 20);
		TraceIn("actionList", 20);
		FlashTeaseScriptParser.actionList_return retval = new FlashTeaseScriptParser.actionList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal85 = default(CommonToken);
		FlashTeaseScriptParser.actionApply_return actionApply84 = default(FlashTeaseScriptParser.actionApply_return);
		FlashTeaseScriptParser.actionApply_return actionApply86 = default(FlashTeaseScriptParser.actionApply_return);

		CommonTree char_literal85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_actionApply=new RewriteRuleSubtreeStream(adaptor,"rule actionApply");
		try { DebugEnterRule(GrammarFileName, "actionList");
		DebugLocation(172, 1);
		try
		{
			// FlashTeaseScript.g:173:2: ( actionApply ( ',' actionApply )* -> ( actionApply )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:173:4: actionApply ( ',' actionApply )*
			{
			DebugLocation(173, 4);
			PushFollow(Follow._actionApply_in_actionList807);
			actionApply84=actionApply();
			PopFollow();

			stream_actionApply.Add(actionApply84.Tree);
			DebugLocation(173, 16);
			// FlashTeaseScript.g:173:16: ( ',' actionApply )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==40))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:173:17: ',' actionApply
					{
					DebugLocation(173, 17);
					char_literal85=(CommonToken)Match(input,40,Follow._40_in_actionList810);  
					stream_40.Add(char_literal85);

					DebugLocation(173, 21);
					PushFollow(Follow._actionApply_in_actionList812);
					actionApply86=actionApply();
					PopFollow();

					stream_actionApply.Add(actionApply86.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: actionApply
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:3: -> ( actionApply )+
			{
				DebugLocation(174, 6);
				if (!(stream_actionApply.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_actionApply.HasNext )
				{
					DebugLocation(174, 6);
					adaptor.AddChild(root_0, stream_actionApply.NextTree());

				}
				stream_actionApply.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionList", 20);
			LeaveRule("actionList", 20);
			LeaveRule_actionList();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "actionList"); }
		return retval;

	}
	// $ANTLR end "actionList"

	private sealed partial class actionApply_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionApply_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionApply();
	partial void LeaveRule_actionApply();

	// $ANTLR start "actionApply"
	// FlashTeaseScript.g:177:1: actionApply : actionId ':' pageRef ;
	[GrammarRule("actionApply")]
	private FlashTeaseScriptParser.actionApply_return actionApply()
	{
		EnterRule_actionApply();
		EnterRule("actionApply", 21);
		TraceIn("actionApply", 21);
		FlashTeaseScriptParser.actionApply_return retval = new FlashTeaseScriptParser.actionApply_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal88 = default(CommonToken);
		FlashTeaseScriptParser.actionId_return actionId87 = default(FlashTeaseScriptParser.actionId_return);
		FlashTeaseScriptParser.pageRef_return pageRef89 = default(FlashTeaseScriptParser.pageRef_return);

		CommonTree char_literal88_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "actionApply");
		DebugLocation(177, 1);
		try
		{
			// FlashTeaseScript.g:178:2: ( actionId ':' pageRef )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:178:4: actionId ':' pageRef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(178, 12);
			PushFollow(Follow._actionId_in_actionApply833);
			actionId87=actionId();
			PopFollow();

			DebugLocation(178, 17);
			char_literal88=(CommonToken)Match(input,42,Follow._42_in_actionApply836); 
			DebugLocation(178, 19);
			PushFollow(Follow._pageRef_in_actionApply839);
			pageRef89=pageRef();
			PopFollow();

			adaptor.AddChild(root_0, pageRef89.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionApply", 21);
			LeaveRule("actionApply", 21);
			LeaveRule_actionApply();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "actionApply"); }
		return retval;

	}
	// $ANTLR end "actionApply"

	private sealed partial class actionId_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionId_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionId();
	partial void LeaveRule_actionId();

	// $ANTLR start "actionId"
	// FlashTeaseScript.g:181:1: actionId : 'action' INTEGER ;
	[GrammarRule("actionId")]
	private FlashTeaseScriptParser.actionId_return actionId()
	{
		EnterRule_actionId();
		EnterRule("actionId", 22);
		TraceIn("actionId", 22);
		FlashTeaseScriptParser.actionId_return retval = new FlashTeaseScriptParser.actionId_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal90 = default(CommonToken);
		CommonToken INTEGER91 = default(CommonToken);

		CommonTree string_literal90_tree = default(CommonTree);
		CommonTree INTEGER91_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "actionId");
		DebugLocation(181, 1);
		try
		{
			// FlashTeaseScript.g:182:2: ( 'action' INTEGER )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:182:4: 'action' INTEGER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(182, 4);
			string_literal90=(CommonToken)Match(input,43,Follow._43_in_actionId850); 
			string_literal90_tree = (CommonTree)adaptor.Create(string_literal90);
			adaptor.AddChild(root_0, string_literal90_tree);

			DebugLocation(182, 13);
			INTEGER91=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_actionId852); 
			INTEGER91_tree = (CommonTree)adaptor.Create(INTEGER91);
			adaptor.AddChild(root_0, INTEGER91_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionId", 22);
			LeaveRule("actionId", 22);
			LeaveRule_actionId();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "actionId"); }
		return retval;

	}
	// $ANTLR end "actionId"

	private sealed partial class targetDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public targetDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_targetDef();
	partial void LeaveRule_targetDef();

	// $ANTLR start "targetDef"
	// FlashTeaseScript.g:185:1: targetDef : 'target:' ( pageRef | rangeDef ) ;
	[GrammarRule("targetDef")]
	private FlashTeaseScriptParser.targetDef_return targetDef()
	{
		EnterRule_targetDef();
		EnterRule("targetDef", 23);
		TraceIn("targetDef", 23);
		FlashTeaseScriptParser.targetDef_return retval = new FlashTeaseScriptParser.targetDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal92 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef93 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.rangeDef_return rangeDef94 = default(FlashTeaseScriptParser.rangeDef_return);

		CommonTree string_literal92_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "targetDef");
		DebugLocation(185, 1);
		try
		{
			// FlashTeaseScript.g:186:2: ( 'target:' ( pageRef | rangeDef ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:186:4: 'target:' ( pageRef | rangeDef )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(186, 13);
			string_literal92=(CommonToken)Match(input,62,Follow._62_in_targetDef863); 
			DebugLocation(186, 15);
			// FlashTeaseScript.g:186:15: ( pageRef | rangeDef )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if (((LA14_0>=INTEGER && LA14_0<=LETTERS)))
			{
				alt14 = 1;
			}
			else if ((LA14_0==57))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:186:17: pageRef
				{
				DebugLocation(186, 17);
				PushFollow(Follow._pageRef_in_targetDef868);
				pageRef93=pageRef();
				PopFollow();

				adaptor.AddChild(root_0, pageRef93.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:186:27: rangeDef
				{
				DebugLocation(186, 27);
				PushFollow(Follow._rangeDef_in_targetDef872);
				rangeDef94=rangeDef();
				PopFollow();

				adaptor.AddChild(root_0, rangeDef94.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("targetDef", 23);
			LeaveRule("targetDef", 23);
			LeaveRule_targetDef();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "targetDef"); }
		return retval;

	}
	// $ANTLR end "targetDef"

	private sealed partial class timeDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timeDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_timeDef();
	partial void LeaveRule_timeDef();

	// $ANTLR start "timeDef"
	// FlashTeaseScript.g:189:1: timeDef : 'time:' INTEGER ( SEC | MIN ) ;
	[GrammarRule("timeDef")]
	private FlashTeaseScriptParser.timeDef_return timeDef()
	{
		EnterRule_timeDef();
		EnterRule("timeDef", 24);
		TraceIn("timeDef", 24);
		FlashTeaseScriptParser.timeDef_return retval = new FlashTeaseScriptParser.timeDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal95 = default(CommonToken);
		CommonToken INTEGER96 = default(CommonToken);
		CommonToken set97 = default(CommonToken);

		CommonTree string_literal95_tree = default(CommonTree);
		CommonTree INTEGER96_tree = default(CommonTree);
		CommonTree set97_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "timeDef");
		DebugLocation(189, 1);
		try
		{
			// FlashTeaseScript.g:190:2: ( 'time:' INTEGER ( SEC | MIN ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:190:4: 'time:' INTEGER ( SEC | MIN )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(190, 11);
			string_literal95=(CommonToken)Match(input,64,Follow._64_in_timeDef885); 
			DebugLocation(190, 13);
			INTEGER96=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_timeDef888); 
			INTEGER96_tree = (CommonTree)adaptor.Create(INTEGER96);
			adaptor.AddChild(root_0, INTEGER96_tree);

			DebugLocation(190, 21);
			set97=(CommonToken)input.LT(1);
			if (input.LA(1)==MIN||input.LA(1)==SEC)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set97));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timeDef", 24);
			LeaveRule("timeDef", 24);
			LeaveRule_timeDef();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "timeDef"); }
		return retval;

	}
	// $ANTLR end "timeDef"

	private sealed partial class styleDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_styleDef();
	partial void LeaveRule_styleDef();

	// $ANTLR start "styleDef"
	// FlashTeaseScript.g:196:1: styleDef : 'style:' ( NORMAL | HIDDEN | SECRET ) ;
	[GrammarRule("styleDef")]
	private FlashTeaseScriptParser.styleDef_return styleDef()
	{
		EnterRule_styleDef();
		EnterRule("styleDef", 25);
		TraceIn("styleDef", 25);
		FlashTeaseScriptParser.styleDef_return retval = new FlashTeaseScriptParser.styleDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal98 = default(CommonToken);
		CommonToken set99 = default(CommonToken);

		CommonTree string_literal98_tree = default(CommonTree);
		CommonTree set99_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "styleDef");
		DebugLocation(196, 1);
		try
		{
			// FlashTeaseScript.g:197:2: ( 'style:' ( NORMAL | HIDDEN | SECRET ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:197:4: 'style:' ( NORMAL | HIDDEN | SECRET )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(197, 12);
			string_literal98=(CommonToken)Match(input,60,Follow._60_in_styleDef922); 
			DebugLocation(197, 14);
			set99=(CommonToken)input.LT(1);
			if (input.LA(1)==HIDDEN||input.LA(1)==NORMAL||input.LA(1)==SECRET)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set99));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleDef", 25);
			LeaveRule("styleDef", 25);
			LeaveRule_styleDef();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "styleDef"); }
		return retval;

	}
	// $ANTLR end "styleDef"

	private sealed partial class rangeDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public rangeDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_rangeDef();
	partial void LeaveRule_rangeDef();

	// $ANTLR start "rangeDef"
	// FlashTeaseScript.g:204:1: rangeDef : 'range(' 'from:' INTEGER ',' 'to:' INTEGER ( ',' ( ':' )? STRING )? ')' -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX STRING ) ) ;
	[GrammarRule("rangeDef")]
	private FlashTeaseScriptParser.rangeDef_return rangeDef()
	{
		EnterRule_rangeDef();
		EnterRule("rangeDef", 26);
		TraceIn("rangeDef", 26);
		FlashTeaseScriptParser.rangeDef_return retval = new FlashTeaseScriptParser.rangeDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal100 = default(CommonToken);
		CommonToken string_literal101 = default(CommonToken);
		CommonToken INTEGER102 = default(CommonToken);
		CommonToken char_literal103 = default(CommonToken);
		CommonToken string_literal104 = default(CommonToken);
		CommonToken INTEGER105 = default(CommonToken);
		CommonToken char_literal106 = default(CommonToken);
		CommonToken char_literal107 = default(CommonToken);
		CommonToken STRING108 = default(CommonToken);
		CommonToken char_literal109 = default(CommonToken);

		CommonTree string_literal100_tree = default(CommonTree);
		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree INTEGER102_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree string_literal104_tree = default(CommonTree);
		CommonTree INTEGER105_tree = default(CommonTree);
		CommonTree char_literal106_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree STRING108_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleITokenStream stream_INTEGER=new RewriteRuleITokenStream(adaptor,"token INTEGER");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");

		try { DebugEnterRule(GrammarFileName, "rangeDef");
		DebugLocation(204, 1);
		try
		{
			// FlashTeaseScript.g:205:2: ( 'range(' 'from:' INTEGER ',' 'to:' INTEGER ( ',' ( ':' )? STRING )? ')' -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX STRING ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:205:4: 'range(' 'from:' INTEGER ',' 'to:' INTEGER ( ',' ( ':' )? STRING )? ')'
			{
			DebugLocation(205, 4);
			string_literal100=(CommonToken)Match(input,57,Follow._57_in_rangeDef968);  
			stream_57.Add(string_literal100);

			DebugLocation(205, 13);
			string_literal101=(CommonToken)Match(input,48,Follow._48_in_rangeDef970);  
			stream_48.Add(string_literal101);

			DebugLocation(205, 21);
			INTEGER102=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_rangeDef972);  
			stream_INTEGER.Add(INTEGER102);

			DebugLocation(205, 29);
			char_literal103=(CommonToken)Match(input,40,Follow._40_in_rangeDef974);  
			stream_40.Add(char_literal103);

			DebugLocation(205, 33);
			string_literal104=(CommonToken)Match(input,65,Follow._65_in_rangeDef976);  
			stream_65.Add(string_literal104);

			DebugLocation(205, 39);
			INTEGER105=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_rangeDef978);  
			stream_INTEGER.Add(INTEGER105);

			DebugLocation(205, 47);
			// FlashTeaseScript.g:205:47: ( ',' ( ':' )? STRING )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==40))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:205:48: ',' ( ':' )? STRING
				{
				DebugLocation(205, 48);
				char_literal106=(CommonToken)Match(input,40,Follow._40_in_rangeDef981);  
				stream_40.Add(char_literal106);

				DebugLocation(205, 52);
				// FlashTeaseScript.g:205:52: ( ':' )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==42))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:205:52: ':'
					{
					DebugLocation(205, 52);
					char_literal107=(CommonToken)Match(input,42,Follow._42_in_rangeDef983);  
					stream_42.Add(char_literal107);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(205, 57);
				STRING108=(CommonToken)Match(input,STRING,Follow._STRING_in_rangeDef986);  
				stream_STRING.Add(STRING108);


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(205, 67);
			char_literal109=(CommonToken)Match(input,39,Follow._39_in_rangeDef991);  
			stream_39.Add(char_literal109);



			{
			// AST REWRITE
			// elements: INTEGER, INTEGER, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 206:3: -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX STRING ) )
			{
				DebugLocation(206, 6);
				// FlashTeaseScript.g:206:6: ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX STRING ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RANGE, "RANGE"), root_1);

				DebugLocation(206, 14);
				// FlashTeaseScript.g:206:14: ^( FROM INTEGER )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 16);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FROM, "FROM"), root_2);

				DebugLocation(206, 21);
				adaptor.AddChild(root_2, stream_INTEGER.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(206, 30);
				// FlashTeaseScript.g:206:30: ^( TO INTEGER )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 32);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TO, "TO"), root_2);

				DebugLocation(206, 35);
				adaptor.AddChild(root_2, stream_INTEGER.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(206, 44);
				// FlashTeaseScript.g:206:44: ^( PREFIX STRING )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 46);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PREFIX, "PREFIX"), root_2);

				DebugLocation(206, 53);
				adaptor.AddChild(root_2, stream_STRING.NextNode());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rangeDef", 26);
			LeaveRule("rangeDef", 26);
			LeaveRule_rangeDef();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "rangeDef"); }
		return retval;

	}
	// $ANTLR end "rangeDef"

	private sealed partial class pageRef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageRef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageRef();
	partial void LeaveRule_pageRef();

	// $ANTLR start "pageRef"
	// FlashTeaseScript.g:209:1: pageRef : pageId ( '#' )? -> ^( ID pageId ) ;
	[GrammarRule("pageRef")]
	private FlashTeaseScriptParser.pageRef_return pageRef()
	{
		EnterRule_pageRef();
		EnterRule("pageRef", 27);
		TraceIn("pageRef", 27);
		FlashTeaseScriptParser.pageRef_return retval = new FlashTeaseScriptParser.pageRef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal111 = default(CommonToken);
		FlashTeaseScriptParser.pageId_return pageId110 = default(FlashTeaseScriptParser.pageId_return);

		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_38=new RewriteRuleITokenStream(adaptor,"token 38");
		RewriteRuleSubtreeStream stream_pageId=new RewriteRuleSubtreeStream(adaptor,"rule pageId");
		try { DebugEnterRule(GrammarFileName, "pageRef");
		DebugLocation(209, 1);
		try
		{
			// FlashTeaseScript.g:210:2: ( pageId ( '#' )? -> ^( ID pageId ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:210:4: pageId ( '#' )?
			{
			DebugLocation(210, 4);
			PushFollow(Follow._pageId_in_pageRef1029);
			pageId110=pageId();
			PopFollow();

			stream_pageId.Add(pageId110.Tree);
			DebugLocation(210, 11);
			// FlashTeaseScript.g:210:11: ( '#' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==38))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:210:11: '#'
				{
				DebugLocation(210, 11);
				char_literal111=(CommonToken)Match(input,38,Follow._38_in_pageRef1031);  
				stream_38.Add(char_literal111);


				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: pageId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:3: -> ^( ID pageId )
			{
				DebugLocation(211, 6);
				// FlashTeaseScript.g:211:6: ^( ID pageId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ID, "ID"), root_1);

				DebugLocation(211, 11);
				adaptor.AddChild(root_1, stream_pageId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageRef", 27);
			LeaveRule("pageRef", 27);
			LeaveRule_pageRef();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "pageRef"); }
		return retval;

	}
	// $ANTLR end "pageRef"

	private sealed partial class pageId_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageId_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageId();
	partial void LeaveRule_pageId();

	// $ANTLR start "pageId"
	// FlashTeaseScript.g:214:1: pageId : ( INTEGER | LETTERS )+ ;
	[GrammarRule("pageId")]
	private FlashTeaseScriptParser.pageId_return pageId()
	{
		EnterRule_pageId();
		EnterRule("pageId", 28);
		TraceIn("pageId", 28);
		FlashTeaseScriptParser.pageId_return retval = new FlashTeaseScriptParser.pageId_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set112 = default(CommonToken);

		CommonTree set112_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pageId");
		DebugLocation(214, 1);
		try
		{
			// FlashTeaseScript.g:215:2: ( ( INTEGER | LETTERS )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:215:4: ( INTEGER | LETTERS )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(215, 4);
			// FlashTeaseScript.g:215:4: ( INTEGER | LETTERS )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if (((LA18_0>=INTEGER && LA18_0<=LETTERS)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:
					{
					DebugLocation(215, 4);
					set112=(CommonToken)input.LT(1);
					if ((input.LA(1)>=INTEGER && input.LA(1)<=LETTERS))
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set112));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageId", 28);
			LeaveRule("pageId", 28);
			LeaveRule_pageId();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "pageId"); }
		return retval;

	}
	// $ANTLR end "pageId"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _page_in_tease201 = new BitSet(new ulong[]{0x6002UL});
		public static readonly BitSet _pageRef_in_page213 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_page215 = new BitSet(new ulong[]{0x801C908000000000UL});
		public static readonly BitSet _pageProperties_in_page217 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_page220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pageProp_in_pageProperties249 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_pageProperties252 = new BitSet(new ulong[]{0x801C900000000000UL});
		public static readonly BitSet _pageProp_in_pageProperties254 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _textDef_in_pageProp275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionDef_in_pageProp291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_textDef302 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_textDef305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionPrefix_in_actionDef316 = new BitSet(new ulong[]{0xD22600000000002UL,0x2CUL});
		public static readonly BitSet _actionMult_in_actionDef320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionVert_in_actionDef324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionPic_in_actionDef328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionSound_in_actionDef332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionGo_in_actionDef336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionYn_in_actionDef340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionDelay_in_actionDef344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionButtons_in_actionDef348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionUnset_in_actionDef352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionSet_in_actionDef356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_actionMult369 = new BitSet(new ulong[]{0x801C900000000000UL});
		public static readonly BitSet _actionDef_in_actionMult371 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _40_in_actionMult374 = new BitSet(new ulong[]{0x801C900000000000UL});
		public static readonly BitSet _actionDef_in_actionMult376 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _39_in_actionMult380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_actionVert399 = new BitSet(new ulong[]{0x801C900000000000UL});
		public static readonly BitSet _actionDef_in_actionVert401 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _40_in_actionVert404 = new BitSet(new ulong[]{0x801C900000000000UL});
		public static readonly BitSet _actionDef_in_actionVert406 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _39_in_actionVert410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_actionPrefix429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_actionPrefix434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_actionPrefix439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_actionPrefix444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_actionPrefix449 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0x3FUL});
		public static readonly BitSet _set_in_actionPrefix463 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0x3FUL});
		public static readonly BitSet _42_in_actionPrefix470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_actionPic481 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_actionPic483 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionPic485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_actionSound507 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_actionSound509 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionSound511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_actionGo532 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _targetDef_in_actionGo534 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionGo536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_actionYn557 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_actionYn559 = new BitSet(new ulong[]{0x10000006000UL});
		public static readonly BitSet _pageRef_in_actionYn561 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_actionYn563 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_actionYn566 = new BitSet(new ulong[]{0x8000006000UL});
		public static readonly BitSet _pageRef_in_actionYn568 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionYn570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_actionDelay601 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _timeDef_in_actionDelay603 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _40_in_actionDelay606 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _targetDef_in_actionDelay608 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _40_in_actionDelay613 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _styleDef_in_actionDelay615 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionDelay619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_actionButtons658 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _buttonSeq_in_actionButtons660 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionButtons662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _buttonDef_in_buttonSeq683 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_buttonSeq686 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _buttonDef_in_buttonSeq688 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _61_in_buttonDef708 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_buttonDef710 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_buttonDef712 = new BitSet(new ulong[]{0x20000006000UL});
		public static readonly BitSet _pageRef_in_buttonDef714 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_buttonDef716 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_buttonDef718 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_buttonDef720 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_buttonDef722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_actionUnset753 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _actionList_in_actionUnset755 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionUnset757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_actionSet780 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _actionList_in_actionSet782 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_actionSet784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionApply_in_actionList807 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_actionList810 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _actionApply_in_actionList812 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _actionId_in_actionApply833 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_actionApply836 = new BitSet(new ulong[]{0x6000UL});
		public static readonly BitSet _pageRef_in_actionApply839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_actionId850 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_actionId852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_targetDef863 = new BitSet(new ulong[]{0x200000000006000UL});
		public static readonly BitSet _pageRef_in_targetDef868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rangeDef_in_targetDef872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_timeDef885 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_timeDef888 = new BitSet(new ulong[]{0x1008000UL});
		public static readonly BitSet _set_in_timeDef890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_styleDef922 = new BitSet(new ulong[]{0x2040800UL});
		public static readonly BitSet _set_in_styleDef925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_rangeDef968 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_rangeDef970 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_rangeDef972 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_rangeDef974 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_rangeDef976 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_rangeDef978 = new BitSet(new ulong[]{0x18000000000UL});
		public static readonly BitSet _40_in_rangeDef981 = new BitSet(new ulong[]{0x40010000000UL});
		public static readonly BitSet _42_in_rangeDef983 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_rangeDef986 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_rangeDef991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pageId_in_pageRef1029 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _38_in_pageRef1031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_pageId1054 = new BitSet(new ulong[]{0x6002UL});

	}
	#endregion Follow sets
}

} // namespace TeaseMe.FlashConversion
