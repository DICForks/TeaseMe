//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 FlashTeaseScript.g 2012-09-27 10:56:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections;
using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace TeaseMe.MilovanaDownload
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class FlashTeaseScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACTION", "BUTTON", "BUTTONS", "CAP", "DELAY", "FROM", "GO", "HIDDEN", "ID", "INTEGER", "LETTERS", "LOOPS", "MAX", "MIN", "MULT", "NO", "NORMAL", "PAGE", "PIC", "PREFIX", "PROPERTIES", "QUOTED_STRING", "RANDOM", "RANGE", "SECRET", "SET", "SOUND", "STYLE", "TARGET", "TEXT", "TIME", "TO", "UNSET", "WS", "YES", "YN", "'#'", "')'", "','", "',cap'", "':'", "'action'", "'action:'", "'buttons('", "'delay('", "'e'", "'from:'", "'go('", "'hidden:'", "'horiz('", "'hrs'", "'instruc:'", "'loops'", "'media:'", "'mult('", "'no:'", "'page('", "'pic(id:'", "'prefix'", "'range('", "'sec'", "'set('", "'sound(id:'", "'style:\\'hidden\\''", "'style:\\'normal\\''", "'style:\\'secret\\''", "'style:hidden'", "'style:normal'", "'style:secret'", "'target'", "'target:'", "'text:'", "'time:'", "'time:random('", "'to:'", "'unset('", "'vert('", "'yes:'", "'yn('"
	};
	public const int EOF=-1;
	public const int ACTION=4;
	public const int BUTTON=5;
	public const int BUTTONS=6;
	public const int CAP=7;
	public const int DELAY=8;
	public const int FROM=9;
	public const int GO=10;
	public const int HIDDEN=11;
	public const int ID=12;
	public const int INTEGER=13;
	public const int LETTERS=14;
	public const int LOOPS=15;
	public const int MAX=16;
	public const int MIN=17;
	public const int MULT=18;
	public const int NO=19;
	public const int NORMAL=20;
	public const int PAGE=21;
	public const int PIC=22;
	public const int PREFIX=23;
	public const int PROPERTIES=24;
	public const int QUOTED_STRING=25;
	public const int RANDOM=26;
	public const int RANGE=27;
	public const int SECRET=28;
	public const int SET=29;
	public const int SOUND=30;
	public const int STYLE=31;
	public const int TARGET=32;
	public const int TEXT=33;
	public const int TIME=34;
	public const int TO=35;
	public const int UNSET=36;
	public const int WS=37;
	public const int YES=38;
	public const int YN=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;

	// delegates
	// delegators

	public FlashTeaseScriptParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public FlashTeaseScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return FlashTeaseScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "FlashTeaseScript.g"; } }


	ArrayList exceptions = new ArrayList();

	public override void ReportError(RecognitionException e)
	{
	    exceptions.Add(e);
	}

	public bool HasError
	{
		get { return exceptions.Count > 0; }
	}

	public string ErrorMessage
	{
		get { return this.GetErrorMessage(exceptions[0] as RecognitionException, this.TokenNames); }
	}

	public string ErrorPosition
	{
		get { return this.GetErrorHeader(exceptions[0] as RecognitionException); }
	}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class tease_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tease_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_tease();
	partial void LeaveRule_tease();

	// $ANTLR start "tease"
	// FlashTeaseScript.g:78:8: public tease : ( page )* ;
	[GrammarRule("tease")]
	public FlashTeaseScriptParser.tease_return tease()
	{
		EnterRule_tease();
		EnterRule("tease", 1);
		TraceIn("tease", 1);
		FlashTeaseScriptParser.tease_return retval = new FlashTeaseScriptParser.tease_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		FlashTeaseScriptParser.page_return page1 = default(FlashTeaseScriptParser.page_return);


		try { DebugEnterRule(GrammarFileName, "tease");
		DebugLocation(78, 1);
		try
		{
			// FlashTeaseScript.g:79:2: ( ( page )* )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:79:4: ( page )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(79, 4);
			// FlashTeaseScript.g:79:4: ( page )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>=INTEGER && LA1_0<=LETTERS)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:79:4: page
					{
					DebugLocation(79, 4);
					PushFollow(Follow._page_in_tease209);
					page1=page();
					PopFollow();

					adaptor.AddChild(root_0, page1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tease", 1);
			LeaveRule("tease", 1);
			LeaveRule_tease();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "tease"); }
		return retval;

	}
	// $ANTLR end "tease"

	private sealed partial class page_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public page_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_page();
	partial void LeaveRule_page();

	// $ANTLR start "page"
	// FlashTeaseScript.g:82:1: page : pageRef 'page(' ( pageProperties )? ')' -> ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? ) ;
	[GrammarRule("page")]
	private FlashTeaseScriptParser.page_return page()
	{
		EnterRule_page();
		EnterRule("page", 2);
		TraceIn("page", 2);
		FlashTeaseScriptParser.page_return retval = new FlashTeaseScriptParser.page_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal3 = default(CommonToken);
		CommonToken char_literal5 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef2 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.pageProperties_return pageProperties4 = default(FlashTeaseScriptParser.pageProperties_return);

		CommonTree string_literal3_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_pageRef=new RewriteRuleSubtreeStream(adaptor,"rule pageRef");
		RewriteRuleSubtreeStream stream_pageProperties=new RewriteRuleSubtreeStream(adaptor,"rule pageProperties");
		try { DebugEnterRule(GrammarFileName, "page");
		DebugLocation(82, 1);
		try
		{
			// FlashTeaseScript.g:83:2: ( pageRef 'page(' ( pageProperties )? ')' -> ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:83:4: pageRef 'page(' ( pageProperties )? ')'
			{
			DebugLocation(83, 4);
			PushFollow(Follow._pageRef_in_page221);
			pageRef2=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef2.Tree);
			DebugLocation(83, 12);
			string_literal3=(CommonToken)Match(input,60,Follow._60_in_page223);  
			stream_60.Add(string_literal3);

			DebugLocation(83, 20);
			// FlashTeaseScript.g:83:20: ( pageProperties )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==46||LA2_0==49||LA2_0==52||LA2_0==55||LA2_0==57||LA2_0==75))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:83:20: pageProperties
				{
				DebugLocation(83, 20);
				PushFollow(Follow._pageProperties_in_page225);
				pageProperties4=pageProperties();
				PopFollow();

				stream_pageProperties.Add(pageProperties4.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(83, 36);
			char_literal5=(CommonToken)Match(input,41,Follow._41_in_page228);  
			stream_41.Add(char_literal5);



			{
			// AST REWRITE
			// elements: pageRef, pageProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 84:3: -> ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? )
			{
				DebugLocation(84, 6);
				// FlashTeaseScript.g:84:6: ^( PAGE pageRef ( ^( PROPERTIES pageProperties ) )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(84, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PAGE, "PAGE"), root_1);

				DebugLocation(84, 13);
				adaptor.AddChild(root_1, stream_pageRef.NextTree());
				DebugLocation(84, 21);
				// FlashTeaseScript.g:84:21: ( ^( PROPERTIES pageProperties ) )?
				if (stream_pageProperties.HasNext)
				{
					DebugLocation(84, 21);
					// FlashTeaseScript.g:84:21: ^( PROPERTIES pageProperties )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(84, 23);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTIES, "PROPERTIES"), root_2);

					DebugLocation(84, 34);
					adaptor.AddChild(root_2, stream_pageProperties.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_pageProperties.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("page", 2);
			LeaveRule("page", 2);
			LeaveRule_page();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "page"); }
		return retval;

	}
	// $ANTLR end "page"

	private sealed partial class pageProperties_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageProperties_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageProperties();
	partial void LeaveRule_pageProperties();

	// $ANTLR start "pageProperties"
	// FlashTeaseScript.g:87:1: pageProperties : pageProp ( ',' pageProp )* -> ( pageProp )+ ;
	[GrammarRule("pageProperties")]
	private FlashTeaseScriptParser.pageProperties_return pageProperties()
	{
		EnterRule_pageProperties();
		EnterRule("pageProperties", 3);
		TraceIn("pageProperties", 3);
		FlashTeaseScriptParser.pageProperties_return retval = new FlashTeaseScriptParser.pageProperties_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal7 = default(CommonToken);
		FlashTeaseScriptParser.pageProp_return pageProp6 = default(FlashTeaseScriptParser.pageProp_return);
		FlashTeaseScriptParser.pageProp_return pageProp8 = default(FlashTeaseScriptParser.pageProp_return);

		CommonTree char_literal7_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleSubtreeStream stream_pageProp=new RewriteRuleSubtreeStream(adaptor,"rule pageProp");
		try { DebugEnterRule(GrammarFileName, "pageProperties");
		DebugLocation(87, 1);
		try
		{
			// FlashTeaseScript.g:88:2: ( pageProp ( ',' pageProp )* -> ( pageProp )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:88:4: pageProp ( ',' pageProp )*
			{
			DebugLocation(88, 4);
			PushFollow(Follow._pageProp_in_pageProperties257);
			pageProp6=pageProp();
			PopFollow();

			stream_pageProp.Add(pageProp6.Tree);
			DebugLocation(88, 13);
			// FlashTeaseScript.g:88:13: ( ',' pageProp )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==42))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:88:14: ',' pageProp
					{
					DebugLocation(88, 14);
					char_literal7=(CommonToken)Match(input,42,Follow._42_in_pageProperties260);  
					stream_42.Add(char_literal7);

					DebugLocation(88, 18);
					PushFollow(Follow._pageProp_in_pageProperties262);
					pageProp8=pageProp();
					PopFollow();

					stream_pageProp.Add(pageProp8.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: pageProp
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 89:3: -> ( pageProp )+
			{
				DebugLocation(89, 6);
				if (!(stream_pageProp.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_pageProp.HasNext )
				{
					DebugLocation(89, 6);
					adaptor.AddChild(root_0, stream_pageProp.NextTree());

				}
				stream_pageProp.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageProperties", 3);
			LeaveRule("pageProperties", 3);
			LeaveRule_pageProperties();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "pageProperties"); }
		return retval;

	}
	// $ANTLR end "pageProperties"

	private sealed partial class pageProp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageProp_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageProp();
	partial void LeaveRule_pageProp();

	// $ANTLR start "pageProp"
	// FlashTeaseScript.g:92:1: pageProp : ( textDef -> ^( TEXT textDef ) | actionDef );
	[GrammarRule("pageProp")]
	private FlashTeaseScriptParser.pageProp_return pageProp()
	{
		EnterRule_pageProp();
		EnterRule("pageProp", 4);
		TraceIn("pageProp", 4);
		FlashTeaseScriptParser.pageProp_return retval = new FlashTeaseScriptParser.pageProp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		FlashTeaseScriptParser.textDef_return textDef9 = default(FlashTeaseScriptParser.textDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef10 = default(FlashTeaseScriptParser.actionDef_return);

		RewriteRuleSubtreeStream stream_textDef=new RewriteRuleSubtreeStream(adaptor,"rule textDef");
		try { DebugEnterRule(GrammarFileName, "pageProp");
		DebugLocation(92, 1);
		try
		{
			// FlashTeaseScript.g:93:2: ( textDef -> ^( TEXT textDef ) | actionDef )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==75))
			{
				alt4 = 1;
			}
			else if ((LA4_0==46||LA4_0==49||LA4_0==52||LA4_0==55||LA4_0==57))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:93:4: textDef
				{
				DebugLocation(93, 4);
				PushFollow(Follow._textDef_in_pageProp283);
				textDef9=textDef();
				PopFollow();

				stream_textDef.Add(textDef9.Tree);


				{
				// AST REWRITE
				// elements: textDef
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 94:3: -> ^( TEXT textDef )
				{
					DebugLocation(94, 6);
					// FlashTeaseScript.g:94:6: ^( TEXT textDef )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(94, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TEXT, "TEXT"), root_1);

					DebugLocation(94, 13);
					adaptor.AddChild(root_1, stream_textDef.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:95:4: actionDef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(95, 4);
				PushFollow(Follow._actionDef_in_pageProp299);
				actionDef10=actionDef();
				PopFollow();

				adaptor.AddChild(root_0, actionDef10.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageProp", 4);
			LeaveRule("pageProp", 4);
			LeaveRule_pageProp();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "pageProp"); }
		return retval;

	}
	// $ANTLR end "pageProp"

	private sealed partial class textDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public textDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_textDef();
	partial void LeaveRule_textDef();

	// $ANTLR start "textDef"
	// FlashTeaseScript.g:98:1: textDef : 'text:' QUOTED_STRING ;
	[GrammarRule("textDef")]
	private FlashTeaseScriptParser.textDef_return textDef()
	{
		EnterRule_textDef();
		EnterRule("textDef", 5);
		TraceIn("textDef", 5);
		FlashTeaseScriptParser.textDef_return retval = new FlashTeaseScriptParser.textDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal11 = default(CommonToken);
		CommonToken QUOTED_STRING12 = default(CommonToken);

		CommonTree string_literal11_tree = default(CommonTree);
		CommonTree QUOTED_STRING12_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "textDef");
		DebugLocation(98, 1);
		try
		{
			// FlashTeaseScript.g:99:2: ( 'text:' QUOTED_STRING )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:99:4: 'text:' QUOTED_STRING
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(99, 11);
			string_literal11=(CommonToken)Match(input,75,Follow._75_in_textDef310); 
			DebugLocation(99, 13);
			QUOTED_STRING12=(CommonToken)Match(input,QUOTED_STRING,Follow._QUOTED_STRING_in_textDef313); 
			QUOTED_STRING12_tree = (CommonTree)adaptor.Create(QUOTED_STRING12);
			adaptor.AddChild(root_0, QUOTED_STRING12_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("textDef", 5);
			LeaveRule("textDef", 5);
			LeaveRule_textDef();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "textDef"); }
		return retval;

	}
	// $ANTLR end "textDef"

	private sealed partial class actionDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionDef();
	partial void LeaveRule_actionDef();

	// $ANTLR start "actionDef"
	// FlashTeaseScript.g:102:1: actionDef : actionPrefix ( actionMult | actionHorVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )? ;
	[GrammarRule("actionDef")]
	private FlashTeaseScriptParser.actionDef_return actionDef()
	{
		EnterRule_actionDef();
		EnterRule("actionDef", 6);
		TraceIn("actionDef", 6);
		FlashTeaseScriptParser.actionDef_return retval = new FlashTeaseScriptParser.actionDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		FlashTeaseScriptParser.actionPrefix_return actionPrefix13 = default(FlashTeaseScriptParser.actionPrefix_return);
		FlashTeaseScriptParser.actionMult_return actionMult14 = default(FlashTeaseScriptParser.actionMult_return);
		FlashTeaseScriptParser.actionHorVert_return actionHorVert15 = default(FlashTeaseScriptParser.actionHorVert_return);
		FlashTeaseScriptParser.actionPic_return actionPic16 = default(FlashTeaseScriptParser.actionPic_return);
		FlashTeaseScriptParser.actionSound_return actionSound17 = default(FlashTeaseScriptParser.actionSound_return);
		FlashTeaseScriptParser.actionGo_return actionGo18 = default(FlashTeaseScriptParser.actionGo_return);
		FlashTeaseScriptParser.actionYn_return actionYn19 = default(FlashTeaseScriptParser.actionYn_return);
		FlashTeaseScriptParser.actionDelay_return actionDelay20 = default(FlashTeaseScriptParser.actionDelay_return);
		FlashTeaseScriptParser.actionButtons_return actionButtons21 = default(FlashTeaseScriptParser.actionButtons_return);
		FlashTeaseScriptParser.actionUnset_return actionUnset22 = default(FlashTeaseScriptParser.actionUnset_return);
		FlashTeaseScriptParser.actionSet_return actionSet23 = default(FlashTeaseScriptParser.actionSet_return);


		try { DebugEnterRule(GrammarFileName, "actionDef");
		DebugLocation(102, 1);
		try
		{
			// FlashTeaseScript.g:103:2: ( actionPrefix ( actionMult | actionHorVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )? )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:103:4: actionPrefix ( actionMult | actionHorVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(103, 16);
			PushFollow(Follow._actionPrefix_in_actionDef324);
			actionPrefix13=actionPrefix();
			PopFollow();

			DebugLocation(103, 18);
			// FlashTeaseScript.g:103:18: ( actionMult | actionHorVert | actionPic | actionSound | actionGo | actionYn | actionDelay | actionButtons | actionUnset | actionSet )?
			int alt5=11;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case 58:
				{
				alt5 = 1;
				}
				break;
			case 53:
			case 80:
				{
				alt5 = 2;
				}
				break;
			case 61:
				{
				alt5 = 3;
				}
				break;
			case 66:
				{
				alt5 = 4;
				}
				break;
			case 51:
				{
				alt5 = 5;
				}
				break;
			case 82:
				{
				alt5 = 6;
				}
				break;
			case 48:
				{
				alt5 = 7;
				}
				break;
			case 47:
				{
				alt5 = 8;
				}
				break;
			case 79:
				{
				alt5 = 9;
				}
				break;
			case 65:
				{
				alt5 = 10;
				}
				break;
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:103:19: actionMult
				{
				DebugLocation(103, 19);
				PushFollow(Follow._actionMult_in_actionDef328);
				actionMult14=actionMult();
				PopFollow();

				adaptor.AddChild(root_0, actionMult14.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:103:32: actionHorVert
				{
				DebugLocation(103, 32);
				PushFollow(Follow._actionHorVert_in_actionDef332);
				actionHorVert15=actionHorVert();
				PopFollow();

				adaptor.AddChild(root_0, actionHorVert15.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FlashTeaseScript.g:103:48: actionPic
				{
				DebugLocation(103, 48);
				PushFollow(Follow._actionPic_in_actionDef336);
				actionPic16=actionPic();
				PopFollow();

				adaptor.AddChild(root_0, actionPic16.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FlashTeaseScript.g:103:60: actionSound
				{
				DebugLocation(103, 60);
				PushFollow(Follow._actionSound_in_actionDef340);
				actionSound17=actionSound();
				PopFollow();

				adaptor.AddChild(root_0, actionSound17.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FlashTeaseScript.g:103:74: actionGo
				{
				DebugLocation(103, 74);
				PushFollow(Follow._actionGo_in_actionDef344);
				actionGo18=actionGo();
				PopFollow();

				adaptor.AddChild(root_0, actionGo18.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// FlashTeaseScript.g:103:85: actionYn
				{
				DebugLocation(103, 85);
				PushFollow(Follow._actionYn_in_actionDef348);
				actionYn19=actionYn();
				PopFollow();

				adaptor.AddChild(root_0, actionYn19.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// FlashTeaseScript.g:103:96: actionDelay
				{
				DebugLocation(103, 96);
				PushFollow(Follow._actionDelay_in_actionDef352);
				actionDelay20=actionDelay();
				PopFollow();

				adaptor.AddChild(root_0, actionDelay20.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// FlashTeaseScript.g:103:110: actionButtons
				{
				DebugLocation(103, 110);
				PushFollow(Follow._actionButtons_in_actionDef356);
				actionButtons21=actionButtons();
				PopFollow();

				adaptor.AddChild(root_0, actionButtons21.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// FlashTeaseScript.g:103:126: actionUnset
				{
				DebugLocation(103, 126);
				PushFollow(Follow._actionUnset_in_actionDef360);
				actionUnset22=actionUnset();
				PopFollow();

				adaptor.AddChild(root_0, actionUnset22.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// FlashTeaseScript.g:103:140: actionSet
				{
				DebugLocation(103, 140);
				PushFollow(Follow._actionSet_in_actionDef364);
				actionSet23=actionSet();
				PopFollow();

				adaptor.AddChild(root_0, actionSet23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionDef", 6);
			LeaveRule("actionDef", 6);
			LeaveRule_actionDef();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "actionDef"); }
		return retval;

	}
	// $ANTLR end "actionDef"

	private sealed partial class actionMult_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionMult_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionMult();
	partial void LeaveRule_actionMult();

	// $ANTLR start "actionMult"
	// FlashTeaseScript.g:106:1: actionMult : 'mult(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ ;
	[GrammarRule("actionMult")]
	private FlashTeaseScriptParser.actionMult_return actionMult()
	{
		EnterRule_actionMult();
		EnterRule("actionMult", 7);
		TraceIn("actionMult", 7);
		FlashTeaseScriptParser.actionMult_return retval = new FlashTeaseScriptParser.actionMult_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal24 = default(CommonToken);
		CommonToken char_literal26 = default(CommonToken);
		CommonToken char_literal28 = default(CommonToken);
		FlashTeaseScriptParser.actionDef_return actionDef25 = default(FlashTeaseScriptParser.actionDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef27 = default(FlashTeaseScriptParser.actionDef_return);

		CommonTree string_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_actionDef=new RewriteRuleSubtreeStream(adaptor,"rule actionDef");
		try { DebugEnterRule(GrammarFileName, "actionMult");
		DebugLocation(106, 1);
		try
		{
			// FlashTeaseScript.g:107:2: ( 'mult(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:107:4: 'mult(' actionDef ( ',' actionDef )* ')'
			{
			DebugLocation(107, 4);
			string_literal24=(CommonToken)Match(input,58,Follow._58_in_actionMult377);  
			stream_58.Add(string_literal24);

			DebugLocation(107, 12);
			PushFollow(Follow._actionDef_in_actionMult379);
			actionDef25=actionDef();
			PopFollow();

			stream_actionDef.Add(actionDef25.Tree);
			DebugLocation(107, 22);
			// FlashTeaseScript.g:107:22: ( ',' actionDef )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==42))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:107:23: ',' actionDef
					{
					DebugLocation(107, 23);
					char_literal26=(CommonToken)Match(input,42,Follow._42_in_actionMult382);  
					stream_42.Add(char_literal26);

					DebugLocation(107, 27);
					PushFollow(Follow._actionDef_in_actionMult384);
					actionDef27=actionDef();
					PopFollow();

					stream_actionDef.Add(actionDef27.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(107, 39);
			char_literal28=(CommonToken)Match(input,41,Follow._41_in_actionMult388);  
			stream_41.Add(char_literal28);



			{
			// AST REWRITE
			// elements: actionDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 108:3: -> ( actionDef )+
			{
				DebugLocation(108, 6);
				if (!(stream_actionDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_actionDef.HasNext )
				{
					DebugLocation(108, 6);
					adaptor.AddChild(root_0, stream_actionDef.NextTree());

				}
				stream_actionDef.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionMult", 7);
			LeaveRule("actionMult", 7);
			LeaveRule_actionMult();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "actionMult"); }
		return retval;

	}
	// $ANTLR end "actionMult"

	private sealed partial class actionHorVert_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionHorVert_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionHorVert();
	partial void LeaveRule_actionHorVert();

	// $ANTLR start "actionHorVert"
	// FlashTeaseScript.g:111:1: actionHorVert : ( 'vert(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ | 'horiz(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ );
	[GrammarRule("actionHorVert")]
	private FlashTeaseScriptParser.actionHorVert_return actionHorVert()
	{
		EnterRule_actionHorVert();
		EnterRule("actionHorVert", 8);
		TraceIn("actionHorVert", 8);
		FlashTeaseScriptParser.actionHorVert_return retval = new FlashTeaseScriptParser.actionHorVert_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal29 = default(CommonToken);
		CommonToken char_literal31 = default(CommonToken);
		CommonToken char_literal33 = default(CommonToken);
		CommonToken string_literal34 = default(CommonToken);
		CommonToken char_literal36 = default(CommonToken);
		CommonToken char_literal38 = default(CommonToken);
		FlashTeaseScriptParser.actionDef_return actionDef30 = default(FlashTeaseScriptParser.actionDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef32 = default(FlashTeaseScriptParser.actionDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef35 = default(FlashTeaseScriptParser.actionDef_return);
		FlashTeaseScriptParser.actionDef_return actionDef37 = default(FlashTeaseScriptParser.actionDef_return);

		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleSubtreeStream stream_actionDef=new RewriteRuleSubtreeStream(adaptor,"rule actionDef");
		try { DebugEnterRule(GrammarFileName, "actionHorVert");
		DebugLocation(111, 1);
		try
		{
			// FlashTeaseScript.g:112:2: ( 'vert(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ | 'horiz(' actionDef ( ',' actionDef )* ')' -> ( actionDef )+ )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==80))
			{
				alt9 = 1;
			}
			else if ((LA9_0==53))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:112:4: 'vert(' actionDef ( ',' actionDef )* ')'
				{
				DebugLocation(112, 4);
				string_literal29=(CommonToken)Match(input,80,Follow._80_in_actionHorVert407);  
				stream_80.Add(string_literal29);

				DebugLocation(112, 12);
				PushFollow(Follow._actionDef_in_actionHorVert409);
				actionDef30=actionDef();
				PopFollow();

				stream_actionDef.Add(actionDef30.Tree);
				DebugLocation(112, 22);
				// FlashTeaseScript.g:112:22: ( ',' actionDef )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==42))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// FlashTeaseScript.g:112:23: ',' actionDef
						{
						DebugLocation(112, 23);
						char_literal31=(CommonToken)Match(input,42,Follow._42_in_actionHorVert412);  
						stream_42.Add(char_literal31);

						DebugLocation(112, 27);
						PushFollow(Follow._actionDef_in_actionHorVert414);
						actionDef32=actionDef();
						PopFollow();

						stream_actionDef.Add(actionDef32.Tree);

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(112, 39);
				char_literal33=(CommonToken)Match(input,41,Follow._41_in_actionHorVert418);  
				stream_41.Add(char_literal33);



				{
				// AST REWRITE
				// elements: actionDef
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 113:3: -> ( actionDef )+
				{
					DebugLocation(113, 6);
					if (!(stream_actionDef.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_actionDef.HasNext )
					{
						DebugLocation(113, 6);
						adaptor.AddChild(root_0, stream_actionDef.NextTree());

					}
					stream_actionDef.Reset();

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:114:4: 'horiz(' actionDef ( ',' actionDef )* ')'
				{
				DebugLocation(114, 4);
				string_literal34=(CommonToken)Match(input,53,Follow._53_in_actionHorVert431);  
				stream_53.Add(string_literal34);

				DebugLocation(114, 13);
				PushFollow(Follow._actionDef_in_actionHorVert433);
				actionDef35=actionDef();
				PopFollow();

				stream_actionDef.Add(actionDef35.Tree);
				DebugLocation(114, 23);
				// FlashTeaseScript.g:114:23: ( ',' actionDef )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==42))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// FlashTeaseScript.g:114:24: ',' actionDef
						{
						DebugLocation(114, 24);
						char_literal36=(CommonToken)Match(input,42,Follow._42_in_actionHorVert436);  
						stream_42.Add(char_literal36);

						DebugLocation(114, 28);
						PushFollow(Follow._actionDef_in_actionHorVert438);
						actionDef37=actionDef();
						PopFollow();

						stream_actionDef.Add(actionDef37.Tree);

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(114, 40);
				char_literal38=(CommonToken)Match(input,41,Follow._41_in_actionHorVert442);  
				stream_41.Add(char_literal38);



				{
				// AST REWRITE
				// elements: actionDef
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 115:3: -> ( actionDef )+
				{
					DebugLocation(115, 6);
					if (!(stream_actionDef.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_actionDef.HasNext )
					{
						DebugLocation(115, 6);
						adaptor.AddChild(root_0, stream_actionDef.NextTree());

					}
					stream_actionDef.Reset();

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionHorVert", 8);
			LeaveRule("actionHorVert", 8);
			LeaveRule_actionHorVert();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "actionHorVert"); }
		return retval;

	}
	// $ANTLR end "actionHorVert"

	private sealed partial class actionPrefix_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionPrefix_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionPrefix();
	partial void LeaveRule_actionPrefix();

	// $ANTLR start "actionPrefix"
	// FlashTeaseScript.g:118:1: actionPrefix : ( 'action:' | 'instruc:' | 'hidden:' | 'media:' | 'e' ( options {greedy=false; } :~ ( ':' ) )* ':' );
	[GrammarRule("actionPrefix")]
	private FlashTeaseScriptParser.actionPrefix_return actionPrefix()
	{
		EnterRule_actionPrefix();
		EnterRule("actionPrefix", 9);
		TraceIn("actionPrefix", 9);
		FlashTeaseScriptParser.actionPrefix_return retval = new FlashTeaseScriptParser.actionPrefix_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal39 = default(CommonToken);
		CommonToken string_literal40 = default(CommonToken);
		CommonToken string_literal41 = default(CommonToken);
		CommonToken string_literal42 = default(CommonToken);
		CommonToken char_literal43 = default(CommonToken);
		CommonToken set44 = default(CommonToken);
		CommonToken char_literal45 = default(CommonToken);

		CommonTree string_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree string_literal42_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		CommonTree set44_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "actionPrefix");
		DebugLocation(118, 1);
		try
		{
			// FlashTeaseScript.g:119:2: ( 'action:' | 'instruc:' | 'hidden:' | 'media:' | 'e' ( options {greedy=false; } :~ ( ':' ) )* ':' )
			int alt11=5;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case 46:
				{
				alt11 = 1;
				}
				break;
			case 55:
				{
				alt11 = 2;
				}
				break;
			case 52:
				{
				alt11 = 3;
				}
				break;
			case 57:
				{
				alt11 = 4;
				}
				break;
			case 49:
				{
				alt11 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:119:4: 'action:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(119, 4);
				string_literal39=(CommonToken)Match(input,46,Follow._46_in_actionPrefix461); 
				string_literal39_tree = (CommonTree)adaptor.Create(string_literal39);
				adaptor.AddChild(root_0, string_literal39_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:120:4: 'instruc:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(120, 4);
				string_literal40=(CommonToken)Match(input,55,Follow._55_in_actionPrefix466); 
				string_literal40_tree = (CommonTree)adaptor.Create(string_literal40);
				adaptor.AddChild(root_0, string_literal40_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FlashTeaseScript.g:121:4: 'hidden:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(121, 4);
				string_literal41=(CommonToken)Match(input,52,Follow._52_in_actionPrefix471); 
				string_literal41_tree = (CommonTree)adaptor.Create(string_literal41);
				adaptor.AddChild(root_0, string_literal41_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FlashTeaseScript.g:122:4: 'media:'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(122, 4);
				string_literal42=(CommonToken)Match(input,57,Follow._57_in_actionPrefix476); 
				string_literal42_tree = (CommonTree)adaptor.Create(string_literal42);
				adaptor.AddChild(root_0, string_literal42_tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FlashTeaseScript.g:123:4: 'e' ( options {greedy=false; } :~ ( ':' ) )* ':'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(123, 4);
				char_literal43=(CommonToken)Match(input,49,Follow._49_in_actionPrefix481); 
				char_literal43_tree = (CommonTree)adaptor.Create(char_literal43);
				adaptor.AddChild(root_0, char_literal43_tree);

				DebugLocation(123, 8);
				// FlashTeaseScript.g:123:8: ( options {greedy=false; } :~ ( ':' ) )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>=ACTION && LA10_0<=43)||(LA10_0>=45 && LA10_0<=82)))
					{
						alt10 = 1;
					}
					else if ((LA10_0==44))
					{
						alt10 = 2;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// FlashTeaseScript.g:123:37: ~ ( ':' )
						{
						DebugLocation(123, 37);
						set44=(CommonToken)input.LT(1);
						if ((input.LA(1)>=ACTION && input.LA(1)<=43)||(input.LA(1)>=45 && input.LA(1)<=82))
						{
							input.Consume();
							adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set44));
							state.errorRecovery=false;
						}
						else
						{
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }

				DebugLocation(123, 46);
				char_literal45=(CommonToken)Match(input,44,Follow._44_in_actionPrefix502); 
				char_literal45_tree = (CommonTree)adaptor.Create(char_literal45);
				adaptor.AddChild(root_0, char_literal45_tree);


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionPrefix", 9);
			LeaveRule("actionPrefix", 9);
			LeaveRule_actionPrefix();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "actionPrefix"); }
		return retval;

	}
	// $ANTLR end "actionPrefix"

	private sealed partial class actionPic_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionPic_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionPic();
	partial void LeaveRule_actionPic();

	// $ANTLR start "actionPic"
	// FlashTeaseScript.g:126:1: actionPic : 'pic(id:' QUOTED_STRING ')' -> ^( PIC QUOTED_STRING ) ;
	[GrammarRule("actionPic")]
	private FlashTeaseScriptParser.actionPic_return actionPic()
	{
		EnterRule_actionPic();
		EnterRule("actionPic", 10);
		TraceIn("actionPic", 10);
		FlashTeaseScriptParser.actionPic_return retval = new FlashTeaseScriptParser.actionPic_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal46 = default(CommonToken);
		CommonToken QUOTED_STRING47 = default(CommonToken);
		CommonToken char_literal48 = default(CommonToken);

		CommonTree string_literal46_tree = default(CommonTree);
		CommonTree QUOTED_STRING47_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_QUOTED_STRING=new RewriteRuleITokenStream(adaptor,"token QUOTED_STRING");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");

		try { DebugEnterRule(GrammarFileName, "actionPic");
		DebugLocation(126, 1);
		try
		{
			// FlashTeaseScript.g:127:2: ( 'pic(id:' QUOTED_STRING ')' -> ^( PIC QUOTED_STRING ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:127:4: 'pic(id:' QUOTED_STRING ')'
			{
			DebugLocation(127, 4);
			string_literal46=(CommonToken)Match(input,61,Follow._61_in_actionPic513);  
			stream_61.Add(string_literal46);

			DebugLocation(127, 14);
			QUOTED_STRING47=(CommonToken)Match(input,QUOTED_STRING,Follow._QUOTED_STRING_in_actionPic515);  
			stream_QUOTED_STRING.Add(QUOTED_STRING47);

			DebugLocation(127, 28);
			char_literal48=(CommonToken)Match(input,41,Follow._41_in_actionPic517);  
			stream_41.Add(char_literal48);



			{
			// AST REWRITE
			// elements: QUOTED_STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 128:3: -> ^( PIC QUOTED_STRING )
			{
				DebugLocation(128, 6);
				// FlashTeaseScript.g:128:6: ^( PIC QUOTED_STRING )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(128, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PIC, "PIC"), root_1);

				DebugLocation(128, 12);
				adaptor.AddChild(root_1, stream_QUOTED_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionPic", 10);
			LeaveRule("actionPic", 10);
			LeaveRule_actionPic();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "actionPic"); }
		return retval;

	}
	// $ANTLR end "actionPic"

	private sealed partial class actionSound_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionSound_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionSound();
	partial void LeaveRule_actionSound();

	// $ANTLR start "actionSound"
	// FlashTeaseScript.g:131:1: actionSound : 'sound(id:' QUOTED_STRING ( ',' 'loops' ':' INTEGER )? ')' -> ^( SOUND ^( ID QUOTED_STRING ) ^( LOOPS ( INTEGER )? ) ) ;
	[GrammarRule("actionSound")]
	private FlashTeaseScriptParser.actionSound_return actionSound()
	{
		EnterRule_actionSound();
		EnterRule("actionSound", 11);
		TraceIn("actionSound", 11);
		FlashTeaseScriptParser.actionSound_return retval = new FlashTeaseScriptParser.actionSound_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal49 = default(CommonToken);
		CommonToken QUOTED_STRING50 = default(CommonToken);
		CommonToken char_literal51 = default(CommonToken);
		CommonToken string_literal52 = default(CommonToken);
		CommonToken char_literal53 = default(CommonToken);
		CommonToken INTEGER54 = default(CommonToken);
		CommonToken char_literal55 = default(CommonToken);

		CommonTree string_literal49_tree = default(CommonTree);
		CommonTree QUOTED_STRING50_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree string_literal52_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		CommonTree INTEGER54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_QUOTED_STRING=new RewriteRuleITokenStream(adaptor,"token QUOTED_STRING");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_INTEGER=new RewriteRuleITokenStream(adaptor,"token INTEGER");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");

		try { DebugEnterRule(GrammarFileName, "actionSound");
		DebugLocation(131, 1);
		try
		{
			// FlashTeaseScript.g:132:2: ( 'sound(id:' QUOTED_STRING ( ',' 'loops' ':' INTEGER )? ')' -> ^( SOUND ^( ID QUOTED_STRING ) ^( LOOPS ( INTEGER )? ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:132:4: 'sound(id:' QUOTED_STRING ( ',' 'loops' ':' INTEGER )? ')'
			{
			DebugLocation(132, 4);
			string_literal49=(CommonToken)Match(input,66,Follow._66_in_actionSound539);  
			stream_66.Add(string_literal49);

			DebugLocation(132, 16);
			QUOTED_STRING50=(CommonToken)Match(input,QUOTED_STRING,Follow._QUOTED_STRING_in_actionSound541);  
			stream_QUOTED_STRING.Add(QUOTED_STRING50);

			DebugLocation(132, 30);
			// FlashTeaseScript.g:132:30: ( ',' 'loops' ':' INTEGER )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==42))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:132:31: ',' 'loops' ':' INTEGER
				{
				DebugLocation(132, 31);
				char_literal51=(CommonToken)Match(input,42,Follow._42_in_actionSound544);  
				stream_42.Add(char_literal51);

				DebugLocation(132, 35);
				string_literal52=(CommonToken)Match(input,56,Follow._56_in_actionSound546);  
				stream_56.Add(string_literal52);

				DebugLocation(132, 43);
				char_literal53=(CommonToken)Match(input,44,Follow._44_in_actionSound548);  
				stream_44.Add(char_literal53);

				DebugLocation(132, 47);
				INTEGER54=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_actionSound550);  
				stream_INTEGER.Add(INTEGER54);


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(132, 57);
			char_literal55=(CommonToken)Match(input,41,Follow._41_in_actionSound554);  
			stream_41.Add(char_literal55);



			{
			// AST REWRITE
			// elements: QUOTED_STRING, INTEGER
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 133:3: -> ^( SOUND ^( ID QUOTED_STRING ) ^( LOOPS ( INTEGER )? ) )
			{
				DebugLocation(133, 6);
				// FlashTeaseScript.g:133:6: ^( SOUND ^( ID QUOTED_STRING ) ^( LOOPS ( INTEGER )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(133, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SOUND, "SOUND"), root_1);

				DebugLocation(133, 14);
				// FlashTeaseScript.g:133:14: ^( ID QUOTED_STRING )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(133, 16);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ID, "ID"), root_2);

				DebugLocation(133, 19);
				adaptor.AddChild(root_2, stream_QUOTED_STRING.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(133, 34);
				// FlashTeaseScript.g:133:34: ^( LOOPS ( INTEGER )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(133, 36);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOOPS, "LOOPS"), root_2);

				DebugLocation(133, 42);
				// FlashTeaseScript.g:133:42: ( INTEGER )?
				if (stream_INTEGER.HasNext)
				{
					DebugLocation(133, 42);
					adaptor.AddChild(root_2, stream_INTEGER.NextNode());

				}
				stream_INTEGER.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionSound", 11);
			LeaveRule("actionSound", 11);
			LeaveRule_actionSound();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "actionSound"); }
		return retval;

	}
	// $ANTLR end "actionSound"

	private sealed partial class actionGo_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionGo_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionGo();
	partial void LeaveRule_actionGo();

	// $ANTLR start "actionGo"
	// FlashTeaseScript.g:136:1: actionGo : 'go(' targetDef ')' -> ^( GO targetDef ) ;
	[GrammarRule("actionGo")]
	private FlashTeaseScriptParser.actionGo_return actionGo()
	{
		EnterRule_actionGo();
		EnterRule("actionGo", 12);
		TraceIn("actionGo", 12);
		FlashTeaseScriptParser.actionGo_return retval = new FlashTeaseScriptParser.actionGo_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal56 = default(CommonToken);
		CommonToken char_literal58 = default(CommonToken);
		FlashTeaseScriptParser.targetDef_return targetDef57 = default(FlashTeaseScriptParser.targetDef_return);

		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_targetDef=new RewriteRuleSubtreeStream(adaptor,"rule targetDef");
		try { DebugEnterRule(GrammarFileName, "actionGo");
		DebugLocation(136, 1);
		try
		{
			// FlashTeaseScript.g:137:2: ( 'go(' targetDef ')' -> ^( GO targetDef ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:137:4: 'go(' targetDef ')'
			{
			DebugLocation(137, 4);
			string_literal56=(CommonToken)Match(input,51,Follow._51_in_actionGo586);  
			stream_51.Add(string_literal56);

			DebugLocation(137, 10);
			PushFollow(Follow._targetDef_in_actionGo588);
			targetDef57=targetDef();
			PopFollow();

			stream_targetDef.Add(targetDef57.Tree);
			DebugLocation(137, 20);
			char_literal58=(CommonToken)Match(input,41,Follow._41_in_actionGo590);  
			stream_41.Add(char_literal58);



			{
			// AST REWRITE
			// elements: targetDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 138:3: -> ^( GO targetDef )
			{
				DebugLocation(138, 6);
				// FlashTeaseScript.g:138:6: ^( GO targetDef )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(138, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GO, "GO"), root_1);

				DebugLocation(138, 11);
				adaptor.AddChild(root_1, stream_targetDef.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionGo", 12);
			LeaveRule("actionGo", 12);
			LeaveRule_actionGo();
		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "actionGo"); }
		return retval;

	}
	// $ANTLR end "actionGo"

	private sealed partial class actionYn_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionYn_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionYn();
	partial void LeaveRule_actionYn();

	// $ANTLR start "actionYn"
	// FlashTeaseScript.g:141:1: actionYn : 'yn(' yesDef ',' noDef ')' -> ^( YN ^( YES yesDef ) ^( NO noDef ) ) ;
	[GrammarRule("actionYn")]
	private FlashTeaseScriptParser.actionYn_return actionYn()
	{
		EnterRule_actionYn();
		EnterRule("actionYn", 13);
		TraceIn("actionYn", 13);
		FlashTeaseScriptParser.actionYn_return retval = new FlashTeaseScriptParser.actionYn_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal59 = default(CommonToken);
		CommonToken char_literal61 = default(CommonToken);
		CommonToken char_literal63 = default(CommonToken);
		FlashTeaseScriptParser.yesDef_return yesDef60 = default(FlashTeaseScriptParser.yesDef_return);
		FlashTeaseScriptParser.noDef_return noDef62 = default(FlashTeaseScriptParser.noDef_return);

		CommonTree string_literal59_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_yesDef=new RewriteRuleSubtreeStream(adaptor,"rule yesDef");
		RewriteRuleSubtreeStream stream_noDef=new RewriteRuleSubtreeStream(adaptor,"rule noDef");
		try { DebugEnterRule(GrammarFileName, "actionYn");
		DebugLocation(141, 1);
		try
		{
			// FlashTeaseScript.g:142:2: ( 'yn(' yesDef ',' noDef ')' -> ^( YN ^( YES yesDef ) ^( NO noDef ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:142:4: 'yn(' yesDef ',' noDef ')'
			{
			DebugLocation(142, 4);
			string_literal59=(CommonToken)Match(input,82,Follow._82_in_actionYn611);  
			stream_82.Add(string_literal59);

			DebugLocation(142, 10);
			PushFollow(Follow._yesDef_in_actionYn613);
			yesDef60=yesDef();
			PopFollow();

			stream_yesDef.Add(yesDef60.Tree);
			DebugLocation(142, 17);
			char_literal61=(CommonToken)Match(input,42,Follow._42_in_actionYn615);  
			stream_42.Add(char_literal61);

			DebugLocation(142, 21);
			PushFollow(Follow._noDef_in_actionYn617);
			noDef62=noDef();
			PopFollow();

			stream_noDef.Add(noDef62.Tree);
			DebugLocation(142, 27);
			char_literal63=(CommonToken)Match(input,41,Follow._41_in_actionYn619);  
			stream_41.Add(char_literal63);



			{
			// AST REWRITE
			// elements: yesDef, noDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 143:3: -> ^( YN ^( YES yesDef ) ^( NO noDef ) )
			{
				DebugLocation(143, 6);
				// FlashTeaseScript.g:143:6: ^( YN ^( YES yesDef ) ^( NO noDef ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(143, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(YN, "YN"), root_1);

				DebugLocation(143, 11);
				// FlashTeaseScript.g:143:11: ^( YES yesDef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(143, 13);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(YES, "YES"), root_2);

				DebugLocation(143, 17);
				adaptor.AddChild(root_2, stream_yesDef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(143, 25);
				// FlashTeaseScript.g:143:25: ^( NO noDef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(143, 27);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NO, "NO"), root_2);

				DebugLocation(143, 30);
				adaptor.AddChild(root_2, stream_noDef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionYn", 13);
			LeaveRule("actionYn", 13);
			LeaveRule_actionYn();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "actionYn"); }
		return retval;

	}
	// $ANTLR end "actionYn"

	private sealed partial class yesDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public yesDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_yesDef();
	partial void LeaveRule_yesDef();

	// $ANTLR start "yesDef"
	// FlashTeaseScript.g:147:1: yesDef : 'yes:' ( pageRef | rangeDef ) ;
	[GrammarRule("yesDef")]
	private FlashTeaseScriptParser.yesDef_return yesDef()
	{
		EnterRule_yesDef();
		EnterRule("yesDef", 14);
		TraceIn("yesDef", 14);
		FlashTeaseScriptParser.yesDef_return retval = new FlashTeaseScriptParser.yesDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal64 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef65 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.rangeDef_return rangeDef66 = default(FlashTeaseScriptParser.rangeDef_return);

		CommonTree string_literal64_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "yesDef");
		DebugLocation(147, 1);
		try
		{
			// FlashTeaseScript.g:148:2: ( 'yes:' ( pageRef | rangeDef ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:148:4: 'yes:' ( pageRef | rangeDef )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(148, 10);
			string_literal64=(CommonToken)Match(input,81,Follow._81_in_yesDef651); 
			DebugLocation(148, 12);
			// FlashTeaseScript.g:148:12: ( pageRef | rangeDef )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if (((LA13_0>=INTEGER && LA13_0<=LETTERS)))
			{
				alt13 = 1;
			}
			else if ((LA13_0==63))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:148:14: pageRef
				{
				DebugLocation(148, 14);
				PushFollow(Follow._pageRef_in_yesDef656);
				pageRef65=pageRef();
				PopFollow();

				adaptor.AddChild(root_0, pageRef65.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:148:24: rangeDef
				{
				DebugLocation(148, 24);
				PushFollow(Follow._rangeDef_in_yesDef660);
				rangeDef66=rangeDef();
				PopFollow();

				adaptor.AddChild(root_0, rangeDef66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("yesDef", 14);
			LeaveRule("yesDef", 14);
			LeaveRule_yesDef();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "yesDef"); }
		return retval;

	}
	// $ANTLR end "yesDef"

	private sealed partial class noDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public noDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_noDef();
	partial void LeaveRule_noDef();

	// $ANTLR start "noDef"
	// FlashTeaseScript.g:152:1: noDef : 'no:' ( pageRef | rangeDef ) ;
	[GrammarRule("noDef")]
	private FlashTeaseScriptParser.noDef_return noDef()
	{
		EnterRule_noDef();
		EnterRule("noDef", 15);
		TraceIn("noDef", 15);
		FlashTeaseScriptParser.noDef_return retval = new FlashTeaseScriptParser.noDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal67 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef68 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.rangeDef_return rangeDef69 = default(FlashTeaseScriptParser.rangeDef_return);

		CommonTree string_literal67_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "noDef");
		DebugLocation(152, 1);
		try
		{
			// FlashTeaseScript.g:153:2: ( 'no:' ( pageRef | rangeDef ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:153:4: 'no:' ( pageRef | rangeDef )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(153, 9);
			string_literal67=(CommonToken)Match(input,59,Follow._59_in_noDef674); 
			DebugLocation(153, 11);
			// FlashTeaseScript.g:153:11: ( pageRef | rangeDef )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if (((LA14_0>=INTEGER && LA14_0<=LETTERS)))
			{
				alt14 = 1;
			}
			else if ((LA14_0==63))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:153:13: pageRef
				{
				DebugLocation(153, 13);
				PushFollow(Follow._pageRef_in_noDef679);
				pageRef68=pageRef();
				PopFollow();

				adaptor.AddChild(root_0, pageRef68.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:153:23: rangeDef
				{
				DebugLocation(153, 23);
				PushFollow(Follow._rangeDef_in_noDef683);
				rangeDef69=rangeDef();
				PopFollow();

				adaptor.AddChild(root_0, rangeDef69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noDef", 15);
			LeaveRule("noDef", 15);
			LeaveRule_noDef();
		}
		DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "noDef"); }
		return retval;

	}
	// $ANTLR end "noDef"

	private sealed partial class actionDelay_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionDelay_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionDelay();
	partial void LeaveRule_actionDelay();

	// $ANTLR start "actionDelay"
	// FlashTeaseScript.g:156:1: actionDelay : 'delay(' timeDef ( ',' targetDef )? ( ',' styleDef )? ')' -> ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) ) ;
	[GrammarRule("actionDelay")]
	private FlashTeaseScriptParser.actionDelay_return actionDelay()
	{
		EnterRule_actionDelay();
		EnterRule("actionDelay", 16);
		TraceIn("actionDelay", 16);
		FlashTeaseScriptParser.actionDelay_return retval = new FlashTeaseScriptParser.actionDelay_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal70 = default(CommonToken);
		CommonToken char_literal72 = default(CommonToken);
		CommonToken char_literal74 = default(CommonToken);
		CommonToken char_literal76 = default(CommonToken);
		FlashTeaseScriptParser.timeDef_return timeDef71 = default(FlashTeaseScriptParser.timeDef_return);
		FlashTeaseScriptParser.targetDef_return targetDef73 = default(FlashTeaseScriptParser.targetDef_return);
		FlashTeaseScriptParser.styleDef_return styleDef75 = default(FlashTeaseScriptParser.styleDef_return);

		CommonTree string_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_timeDef=new RewriteRuleSubtreeStream(adaptor,"rule timeDef");
		RewriteRuleSubtreeStream stream_targetDef=new RewriteRuleSubtreeStream(adaptor,"rule targetDef");
		RewriteRuleSubtreeStream stream_styleDef=new RewriteRuleSubtreeStream(adaptor,"rule styleDef");
		try { DebugEnterRule(GrammarFileName, "actionDelay");
		DebugLocation(156, 1);
		try
		{
			// FlashTeaseScript.g:157:2: ( 'delay(' timeDef ( ',' targetDef )? ( ',' styleDef )? ')' -> ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:157:4: 'delay(' timeDef ( ',' targetDef )? ( ',' styleDef )? ')'
			{
			DebugLocation(157, 4);
			string_literal70=(CommonToken)Match(input,48,Follow._48_in_actionDelay696);  
			stream_48.Add(string_literal70);

			DebugLocation(157, 13);
			PushFollow(Follow._timeDef_in_actionDelay698);
			timeDef71=timeDef();
			PopFollow();

			stream_timeDef.Add(timeDef71.Tree);
			DebugLocation(157, 21);
			// FlashTeaseScript.g:157:21: ( ',' targetDef )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==42))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==74))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:157:22: ',' targetDef
				{
				DebugLocation(157, 22);
				char_literal72=(CommonToken)Match(input,42,Follow._42_in_actionDelay701);  
				stream_42.Add(char_literal72);

				DebugLocation(157, 26);
				PushFollow(Follow._targetDef_in_actionDelay703);
				targetDef73=targetDef();
				PopFollow();

				stream_targetDef.Add(targetDef73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(157, 38);
			// FlashTeaseScript.g:157:38: ( ',' styleDef )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==42))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:157:39: ',' styleDef
				{
				DebugLocation(157, 39);
				char_literal74=(CommonToken)Match(input,42,Follow._42_in_actionDelay708);  
				stream_42.Add(char_literal74);

				DebugLocation(157, 43);
				PushFollow(Follow._styleDef_in_actionDelay710);
				styleDef75=styleDef();
				PopFollow();

				stream_styleDef.Add(styleDef75.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(157, 54);
			char_literal76=(CommonToken)Match(input,41,Follow._41_in_actionDelay714);  
			stream_41.Add(char_literal76);



			{
			// AST REWRITE
			// elements: timeDef, targetDef, styleDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 158:3: -> ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) )
			{
				DebugLocation(158, 6);
				// FlashTeaseScript.g:158:6: ^( DELAY ^( TIME timeDef ) ^( TARGET targetDef ) ^( STYLE ( styleDef )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(158, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELAY, "DELAY"), root_1);

				DebugLocation(158, 14);
				// FlashTeaseScript.g:158:14: ^( TIME timeDef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(158, 16);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TIME, "TIME"), root_2);

				DebugLocation(158, 21);
				adaptor.AddChild(root_2, stream_timeDef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(158, 30);
				// FlashTeaseScript.g:158:30: ^( TARGET targetDef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(158, 32);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TARGET, "TARGET"), root_2);

				DebugLocation(158, 39);
				adaptor.AddChild(root_2, stream_targetDef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(158, 50);
				// FlashTeaseScript.g:158:50: ^( STYLE ( styleDef )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(158, 52);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STYLE, "STYLE"), root_2);

				DebugLocation(158, 58);
				// FlashTeaseScript.g:158:58: ( styleDef )?
				if (stream_styleDef.HasNext)
				{
					DebugLocation(158, 58);
					adaptor.AddChild(root_2, stream_styleDef.NextTree());

				}
				stream_styleDef.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionDelay", 16);
			LeaveRule("actionDelay", 16);
			LeaveRule_actionDelay();
		}
		DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "actionDelay"); }
		return retval;

	}
	// $ANTLR end "actionDelay"

	private sealed partial class actionButtons_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionButtons_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionButtons();
	partial void LeaveRule_actionButtons();

	// $ANTLR start "actionButtons"
	// FlashTeaseScript.g:161:1: actionButtons : 'buttons(' buttonSeq ')' -> ^( BUTTONS buttonSeq ) ;
	[GrammarRule("actionButtons")]
	private FlashTeaseScriptParser.actionButtons_return actionButtons()
	{
		EnterRule_actionButtons();
		EnterRule("actionButtons", 17);
		TraceIn("actionButtons", 17);
		FlashTeaseScriptParser.actionButtons_return retval = new FlashTeaseScriptParser.actionButtons_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal77 = default(CommonToken);
		CommonToken char_literal79 = default(CommonToken);
		FlashTeaseScriptParser.buttonSeq_return buttonSeq78 = default(FlashTeaseScriptParser.buttonSeq_return);

		CommonTree string_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_buttonSeq=new RewriteRuleSubtreeStream(adaptor,"rule buttonSeq");
		try { DebugEnterRule(GrammarFileName, "actionButtons");
		DebugLocation(161, 1);
		try
		{
			// FlashTeaseScript.g:162:2: ( 'buttons(' buttonSeq ')' -> ^( BUTTONS buttonSeq ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:162:4: 'buttons(' buttonSeq ')'
			{
			DebugLocation(162, 4);
			string_literal77=(CommonToken)Match(input,47,Follow._47_in_actionButtons753);  
			stream_47.Add(string_literal77);

			DebugLocation(162, 15);
			PushFollow(Follow._buttonSeq_in_actionButtons755);
			buttonSeq78=buttonSeq();
			PopFollow();

			stream_buttonSeq.Add(buttonSeq78.Tree);
			DebugLocation(162, 25);
			char_literal79=(CommonToken)Match(input,41,Follow._41_in_actionButtons757);  
			stream_41.Add(char_literal79);



			{
			// AST REWRITE
			// elements: buttonSeq
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 163:3: -> ^( BUTTONS buttonSeq )
			{
				DebugLocation(163, 6);
				// FlashTeaseScript.g:163:6: ^( BUTTONS buttonSeq )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(163, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUTTONS, "BUTTONS"), root_1);

				DebugLocation(163, 16);
				adaptor.AddChild(root_1, stream_buttonSeq.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionButtons", 17);
			LeaveRule("actionButtons", 17);
			LeaveRule_actionButtons();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "actionButtons"); }
		return retval;

	}
	// $ANTLR end "actionButtons"

	private sealed partial class buttonSeq_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public buttonSeq_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_buttonSeq();
	partial void LeaveRule_buttonSeq();

	// $ANTLR start "buttonSeq"
	// FlashTeaseScript.g:166:1: buttonSeq : buttonDef ( ',' buttonDef )* -> ( buttonDef )+ ;
	[GrammarRule("buttonSeq")]
	private FlashTeaseScriptParser.buttonSeq_return buttonSeq()
	{
		EnterRule_buttonSeq();
		EnterRule("buttonSeq", 18);
		TraceIn("buttonSeq", 18);
		FlashTeaseScriptParser.buttonSeq_return retval = new FlashTeaseScriptParser.buttonSeq_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal81 = default(CommonToken);
		FlashTeaseScriptParser.buttonDef_return buttonDef80 = default(FlashTeaseScriptParser.buttonDef_return);
		FlashTeaseScriptParser.buttonDef_return buttonDef82 = default(FlashTeaseScriptParser.buttonDef_return);

		CommonTree char_literal81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleSubtreeStream stream_buttonDef=new RewriteRuleSubtreeStream(adaptor,"rule buttonDef");
		try { DebugEnterRule(GrammarFileName, "buttonSeq");
		DebugLocation(166, 1);
		try
		{
			// FlashTeaseScript.g:167:2: ( buttonDef ( ',' buttonDef )* -> ( buttonDef )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:167:4: buttonDef ( ',' buttonDef )*
			{
			DebugLocation(167, 4);
			PushFollow(Follow._buttonDef_in_buttonSeq778);
			buttonDef80=buttonDef();
			PopFollow();

			stream_buttonDef.Add(buttonDef80.Tree);
			DebugLocation(167, 14);
			// FlashTeaseScript.g:167:14: ( ',' buttonDef )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==42))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:167:15: ',' buttonDef
					{
					DebugLocation(167, 15);
					char_literal81=(CommonToken)Match(input,42,Follow._42_in_buttonSeq781);  
					stream_42.Add(char_literal81);

					DebugLocation(167, 19);
					PushFollow(Follow._buttonDef_in_buttonSeq783);
					buttonDef82=buttonDef();
					PopFollow();

					stream_buttonDef.Add(buttonDef82.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: buttonDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 168:3: -> ( buttonDef )+
			{
				DebugLocation(168, 6);
				if (!(stream_buttonDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_buttonDef.HasNext )
				{
					DebugLocation(168, 6);
					adaptor.AddChild(root_0, stream_buttonDef.NextTree());

				}
				stream_buttonDef.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("buttonSeq", 18);
			LeaveRule("buttonSeq", 18);
			LeaveRule_buttonSeq();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "buttonSeq"); }
		return retval;

	}
	// $ANTLR end "buttonSeq"

	private sealed partial class buttonDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public buttonDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_buttonDef();
	partial void LeaveRule_buttonDef();

	// $ANTLR start "buttonDef"
	// FlashTeaseScript.g:171:1: buttonDef : 'target' INTEGER ':' pageRef ',cap' INTEGER ':' QUOTED_STRING -> ^( BUTTON ^( TARGET pageRef ) ^( CAP QUOTED_STRING ) ) ;
	[GrammarRule("buttonDef")]
	private FlashTeaseScriptParser.buttonDef_return buttonDef()
	{
		EnterRule_buttonDef();
		EnterRule("buttonDef", 19);
		TraceIn("buttonDef", 19);
		FlashTeaseScriptParser.buttonDef_return retval = new FlashTeaseScriptParser.buttonDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal83 = default(CommonToken);
		CommonToken INTEGER84 = default(CommonToken);
		CommonToken char_literal85 = default(CommonToken);
		CommonToken string_literal87 = default(CommonToken);
		CommonToken INTEGER88 = default(CommonToken);
		CommonToken char_literal89 = default(CommonToken);
		CommonToken QUOTED_STRING90 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef86 = default(FlashTeaseScriptParser.pageRef_return);

		CommonTree string_literal83_tree = default(CommonTree);
		CommonTree INTEGER84_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree string_literal87_tree = default(CommonTree);
		CommonTree INTEGER88_tree = default(CommonTree);
		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree QUOTED_STRING90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_INTEGER=new RewriteRuleITokenStream(adaptor,"token INTEGER");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleITokenStream stream_QUOTED_STRING=new RewriteRuleITokenStream(adaptor,"token QUOTED_STRING");
		RewriteRuleSubtreeStream stream_pageRef=new RewriteRuleSubtreeStream(adaptor,"rule pageRef");
		try { DebugEnterRule(GrammarFileName, "buttonDef");
		DebugLocation(171, 1);
		try
		{
			// FlashTeaseScript.g:172:2: ( 'target' INTEGER ':' pageRef ',cap' INTEGER ':' QUOTED_STRING -> ^( BUTTON ^( TARGET pageRef ) ^( CAP QUOTED_STRING ) ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:172:4: 'target' INTEGER ':' pageRef ',cap' INTEGER ':' QUOTED_STRING
			{
			DebugLocation(172, 4);
			string_literal83=(CommonToken)Match(input,73,Follow._73_in_buttonDef803);  
			stream_73.Add(string_literal83);

			DebugLocation(172, 13);
			INTEGER84=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_buttonDef805);  
			stream_INTEGER.Add(INTEGER84);

			DebugLocation(172, 21);
			char_literal85=(CommonToken)Match(input,44,Follow._44_in_buttonDef807);  
			stream_44.Add(char_literal85);

			DebugLocation(172, 25);
			PushFollow(Follow._pageRef_in_buttonDef809);
			pageRef86=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef86.Tree);
			DebugLocation(172, 33);
			string_literal87=(CommonToken)Match(input,43,Follow._43_in_buttonDef811);  
			stream_43.Add(string_literal87);

			DebugLocation(172, 40);
			INTEGER88=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_buttonDef813);  
			stream_INTEGER.Add(INTEGER88);

			DebugLocation(172, 48);
			char_literal89=(CommonToken)Match(input,44,Follow._44_in_buttonDef815);  
			stream_44.Add(char_literal89);

			DebugLocation(172, 52);
			QUOTED_STRING90=(CommonToken)Match(input,QUOTED_STRING,Follow._QUOTED_STRING_in_buttonDef817);  
			stream_QUOTED_STRING.Add(QUOTED_STRING90);



			{
			// AST REWRITE
			// elements: pageRef, QUOTED_STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 173:3: -> ^( BUTTON ^( TARGET pageRef ) ^( CAP QUOTED_STRING ) )
			{
				DebugLocation(173, 6);
				// FlashTeaseScript.g:173:6: ^( BUTTON ^( TARGET pageRef ) ^( CAP QUOTED_STRING ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(173, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUTTON, "BUTTON"), root_1);

				DebugLocation(173, 15);
				// FlashTeaseScript.g:173:15: ^( TARGET pageRef )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(173, 17);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TARGET, "TARGET"), root_2);

				DebugLocation(173, 24);
				adaptor.AddChild(root_2, stream_pageRef.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(173, 33);
				// FlashTeaseScript.g:173:33: ^( CAP QUOTED_STRING )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(173, 35);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAP, "CAP"), root_2);

				DebugLocation(173, 39);
				adaptor.AddChild(root_2, stream_QUOTED_STRING.NextNode());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("buttonDef", 19);
			LeaveRule("buttonDef", 19);
			LeaveRule_buttonDef();
		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "buttonDef"); }
		return retval;

	}
	// $ANTLR end "buttonDef"

	private sealed partial class actionUnset_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionUnset_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionUnset();
	partial void LeaveRule_actionUnset();

	// $ANTLR start "actionUnset"
	// FlashTeaseScript.g:176:1: actionUnset : 'unset(' actionList ')' -> ^( UNSET actionList ) ;
	[GrammarRule("actionUnset")]
	private FlashTeaseScriptParser.actionUnset_return actionUnset()
	{
		EnterRule_actionUnset();
		EnterRule("actionUnset", 20);
		TraceIn("actionUnset", 20);
		FlashTeaseScriptParser.actionUnset_return retval = new FlashTeaseScriptParser.actionUnset_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal91 = default(CommonToken);
		CommonToken char_literal93 = default(CommonToken);
		FlashTeaseScriptParser.actionList_return actionList92 = default(FlashTeaseScriptParser.actionList_return);

		CommonTree string_literal91_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_actionList=new RewriteRuleSubtreeStream(adaptor,"rule actionList");
		try { DebugEnterRule(GrammarFileName, "actionUnset");
		DebugLocation(176, 1);
		try
		{
			// FlashTeaseScript.g:177:2: ( 'unset(' actionList ')' -> ^( UNSET actionList ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:177:4: 'unset(' actionList ')'
			{
			DebugLocation(177, 4);
			string_literal91=(CommonToken)Match(input,79,Follow._79_in_actionUnset848);  
			stream_79.Add(string_literal91);

			DebugLocation(177, 13);
			PushFollow(Follow._actionList_in_actionUnset850);
			actionList92=actionList();
			PopFollow();

			stream_actionList.Add(actionList92.Tree);
			DebugLocation(177, 24);
			char_literal93=(CommonToken)Match(input,41,Follow._41_in_actionUnset852);  
			stream_41.Add(char_literal93);



			{
			// AST REWRITE
			// elements: actionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 178:3: -> ^( UNSET actionList )
			{
				DebugLocation(178, 6);
				// FlashTeaseScript.g:178:6: ^( UNSET actionList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(178, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNSET, "UNSET"), root_1);

				DebugLocation(178, 15);
				adaptor.AddChild(root_1, stream_actionList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionUnset", 20);
			LeaveRule("actionUnset", 20);
			LeaveRule_actionUnset();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "actionUnset"); }
		return retval;

	}
	// $ANTLR end "actionUnset"

	private sealed partial class actionSet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionSet_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionSet();
	partial void LeaveRule_actionSet();

	// $ANTLR start "actionSet"
	// FlashTeaseScript.g:181:1: actionSet : 'set(' actionList ')' -> ^( SET actionList ) ;
	[GrammarRule("actionSet")]
	private FlashTeaseScriptParser.actionSet_return actionSet()
	{
		EnterRule_actionSet();
		EnterRule("actionSet", 21);
		TraceIn("actionSet", 21);
		FlashTeaseScriptParser.actionSet_return retval = new FlashTeaseScriptParser.actionSet_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal94 = default(CommonToken);
		CommonToken char_literal96 = default(CommonToken);
		FlashTeaseScriptParser.actionList_return actionList95 = default(FlashTeaseScriptParser.actionList_return);

		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_actionList=new RewriteRuleSubtreeStream(adaptor,"rule actionList");
		try { DebugEnterRule(GrammarFileName, "actionSet");
		DebugLocation(181, 1);
		try
		{
			// FlashTeaseScript.g:182:2: ( 'set(' actionList ')' -> ^( SET actionList ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:182:4: 'set(' actionList ')'
			{
			DebugLocation(182, 4);
			string_literal94=(CommonToken)Match(input,65,Follow._65_in_actionSet875);  
			stream_65.Add(string_literal94);

			DebugLocation(182, 11);
			PushFollow(Follow._actionList_in_actionSet877);
			actionList95=actionList();
			PopFollow();

			stream_actionList.Add(actionList95.Tree);
			DebugLocation(182, 22);
			char_literal96=(CommonToken)Match(input,41,Follow._41_in_actionSet879);  
			stream_41.Add(char_literal96);



			{
			// AST REWRITE
			// elements: actionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 183:3: -> ^( SET actionList )
			{
				DebugLocation(183, 6);
				// FlashTeaseScript.g:183:6: ^( SET actionList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(183, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SET, "SET"), root_1);

				DebugLocation(183, 13);
				adaptor.AddChild(root_1, stream_actionList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionSet", 21);
			LeaveRule("actionSet", 21);
			LeaveRule_actionSet();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "actionSet"); }
		return retval;

	}
	// $ANTLR end "actionSet"

	private sealed partial class actionList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionList_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionList();
	partial void LeaveRule_actionList();

	// $ANTLR start "actionList"
	// FlashTeaseScript.g:186:1: actionList : actionApply ( ',' actionApply )* -> ( actionApply )+ ;
	[GrammarRule("actionList")]
	private FlashTeaseScriptParser.actionList_return actionList()
	{
		EnterRule_actionList();
		EnterRule("actionList", 22);
		TraceIn("actionList", 22);
		FlashTeaseScriptParser.actionList_return retval = new FlashTeaseScriptParser.actionList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal98 = default(CommonToken);
		FlashTeaseScriptParser.actionApply_return actionApply97 = default(FlashTeaseScriptParser.actionApply_return);
		FlashTeaseScriptParser.actionApply_return actionApply99 = default(FlashTeaseScriptParser.actionApply_return);

		CommonTree char_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleSubtreeStream stream_actionApply=new RewriteRuleSubtreeStream(adaptor,"rule actionApply");
		try { DebugEnterRule(GrammarFileName, "actionList");
		DebugLocation(186, 1);
		try
		{
			// FlashTeaseScript.g:187:2: ( actionApply ( ',' actionApply )* -> ( actionApply )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:187:4: actionApply ( ',' actionApply )*
			{
			DebugLocation(187, 4);
			PushFollow(Follow._actionApply_in_actionList902);
			actionApply97=actionApply();
			PopFollow();

			stream_actionApply.Add(actionApply97.Tree);
			DebugLocation(187, 16);
			// FlashTeaseScript.g:187:16: ( ',' actionApply )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==42))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:187:17: ',' actionApply
					{
					DebugLocation(187, 17);
					char_literal98=(CommonToken)Match(input,42,Follow._42_in_actionList905);  
					stream_42.Add(char_literal98);

					DebugLocation(187, 21);
					PushFollow(Follow._actionApply_in_actionList907);
					actionApply99=actionApply();
					PopFollow();

					stream_actionApply.Add(actionApply99.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: actionApply
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 188:3: -> ( actionApply )+
			{
				DebugLocation(188, 6);
				if (!(stream_actionApply.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_actionApply.HasNext )
				{
					DebugLocation(188, 6);
					adaptor.AddChild(root_0, stream_actionApply.NextTree());

				}
				stream_actionApply.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionList", 22);
			LeaveRule("actionList", 22);
			LeaveRule_actionList();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "actionList"); }
		return retval;

	}
	// $ANTLR end "actionList"

	private sealed partial class actionApply_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionApply_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionApply();
	partial void LeaveRule_actionApply();

	// $ANTLR start "actionApply"
	// FlashTeaseScript.g:191:1: actionApply : ( actionId ':' )? pageRef -> pageRef ;
	[GrammarRule("actionApply")]
	private FlashTeaseScriptParser.actionApply_return actionApply()
	{
		EnterRule_actionApply();
		EnterRule("actionApply", 23);
		TraceIn("actionApply", 23);
		FlashTeaseScriptParser.actionApply_return retval = new FlashTeaseScriptParser.actionApply_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal101 = default(CommonToken);
		FlashTeaseScriptParser.actionId_return actionId100 = default(FlashTeaseScriptParser.actionId_return);
		FlashTeaseScriptParser.pageRef_return pageRef102 = default(FlashTeaseScriptParser.pageRef_return);

		CommonTree char_literal101_tree = default(CommonTree);
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleSubtreeStream stream_actionId=new RewriteRuleSubtreeStream(adaptor,"rule actionId");
		RewriteRuleSubtreeStream stream_pageRef=new RewriteRuleSubtreeStream(adaptor,"rule pageRef");
		try { DebugEnterRule(GrammarFileName, "actionApply");
		DebugLocation(191, 1);
		try
		{
			// FlashTeaseScript.g:192:2: ( ( actionId ':' )? pageRef -> pageRef )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:192:4: ( actionId ':' )? pageRef
			{
			DebugLocation(192, 4);
			// FlashTeaseScript.g:192:4: ( actionId ':' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==45))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:192:5: actionId ':'
				{
				DebugLocation(192, 5);
				PushFollow(Follow._actionId_in_actionApply929);
				actionId100=actionId();
				PopFollow();

				stream_actionId.Add(actionId100.Tree);
				DebugLocation(192, 14);
				char_literal101=(CommonToken)Match(input,44,Follow._44_in_actionApply931);  
				stream_44.Add(char_literal101);


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(192, 20);
			PushFollow(Follow._pageRef_in_actionApply935);
			pageRef102=pageRef();
			PopFollow();

			stream_pageRef.Add(pageRef102.Tree);


			{
			// AST REWRITE
			// elements: pageRef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 193:3: -> pageRef
			{
				DebugLocation(193, 6);
				adaptor.AddChild(root_0, stream_pageRef.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionApply", 23);
			LeaveRule("actionApply", 23);
			LeaveRule_actionApply();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "actionApply"); }
		return retval;

	}
	// $ANTLR end "actionApply"

	private sealed partial class actionId_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public actionId_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_actionId();
	partial void LeaveRule_actionId();

	// $ANTLR start "actionId"
	// FlashTeaseScript.g:196:1: actionId : 'action' INTEGER ;
	[GrammarRule("actionId")]
	private FlashTeaseScriptParser.actionId_return actionId()
	{
		EnterRule_actionId();
		EnterRule("actionId", 24);
		TraceIn("actionId", 24);
		FlashTeaseScriptParser.actionId_return retval = new FlashTeaseScriptParser.actionId_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal103 = default(CommonToken);
		CommonToken INTEGER104 = default(CommonToken);

		CommonTree string_literal103_tree = default(CommonTree);
		CommonTree INTEGER104_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "actionId");
		DebugLocation(196, 1);
		try
		{
			// FlashTeaseScript.g:197:2: ( 'action' INTEGER )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:197:4: 'action' INTEGER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(197, 4);
			string_literal103=(CommonToken)Match(input,45,Follow._45_in_actionId952); 
			string_literal103_tree = (CommonTree)adaptor.Create(string_literal103);
			adaptor.AddChild(root_0, string_literal103_tree);

			DebugLocation(197, 13);
			INTEGER104=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_actionId954); 
			INTEGER104_tree = (CommonTree)adaptor.Create(INTEGER104);
			adaptor.AddChild(root_0, INTEGER104_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("actionId", 24);
			LeaveRule("actionId", 24);
			LeaveRule_actionId();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "actionId"); }
		return retval;

	}
	// $ANTLR end "actionId"

	private sealed partial class targetDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public targetDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_targetDef();
	partial void LeaveRule_targetDef();

	// $ANTLR start "targetDef"
	// FlashTeaseScript.g:200:1: targetDef : 'target:' ( pageRef | rangeDef ) ;
	[GrammarRule("targetDef")]
	private FlashTeaseScriptParser.targetDef_return targetDef()
	{
		EnterRule_targetDef();
		EnterRule("targetDef", 25);
		TraceIn("targetDef", 25);
		FlashTeaseScriptParser.targetDef_return retval = new FlashTeaseScriptParser.targetDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal105 = default(CommonToken);
		FlashTeaseScriptParser.pageRef_return pageRef106 = default(FlashTeaseScriptParser.pageRef_return);
		FlashTeaseScriptParser.rangeDef_return rangeDef107 = default(FlashTeaseScriptParser.rangeDef_return);

		CommonTree string_literal105_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "targetDef");
		DebugLocation(200, 1);
		try
		{
			// FlashTeaseScript.g:201:2: ( 'target:' ( pageRef | rangeDef ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:201:4: 'target:' ( pageRef | rangeDef )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(201, 13);
			string_literal105=(CommonToken)Match(input,74,Follow._74_in_targetDef965); 
			DebugLocation(201, 15);
			// FlashTeaseScript.g:201:15: ( pageRef | rangeDef )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if (((LA20_0>=INTEGER && LA20_0<=LETTERS)))
			{
				alt20 = 1;
			}
			else if ((LA20_0==63))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:201:17: pageRef
				{
				DebugLocation(201, 17);
				PushFollow(Follow._pageRef_in_targetDef970);
				pageRef106=pageRef();
				PopFollow();

				adaptor.AddChild(root_0, pageRef106.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:201:27: rangeDef
				{
				DebugLocation(201, 27);
				PushFollow(Follow._rangeDef_in_targetDef974);
				rangeDef107=rangeDef();
				PopFollow();

				adaptor.AddChild(root_0, rangeDef107.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("targetDef", 25);
			LeaveRule("targetDef", 25);
			LeaveRule_targetDef();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "targetDef"); }
		return retval;

	}
	// $ANTLR end "targetDef"

	private sealed partial class timeDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timeDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_timeDef();
	partial void LeaveRule_timeDef();

	// $ANTLR start "timeDef"
	// FlashTeaseScript.g:204:1: timeDef : ( 'time:random(' timeRange ')' | 'time:' timeValue -> ^( MIN timeValue ) );
	[GrammarRule("timeDef")]
	private FlashTeaseScriptParser.timeDef_return timeDef()
	{
		EnterRule_timeDef();
		EnterRule("timeDef", 26);
		TraceIn("timeDef", 26);
		FlashTeaseScriptParser.timeDef_return retval = new FlashTeaseScriptParser.timeDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal108 = default(CommonToken);
		CommonToken char_literal110 = default(CommonToken);
		CommonToken string_literal111 = default(CommonToken);
		FlashTeaseScriptParser.timeRange_return timeRange109 = default(FlashTeaseScriptParser.timeRange_return);
		FlashTeaseScriptParser.timeValue_return timeValue112 = default(FlashTeaseScriptParser.timeValue_return);

		CommonTree string_literal108_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree string_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_timeValue=new RewriteRuleSubtreeStream(adaptor,"rule timeValue");
		try { DebugEnterRule(GrammarFileName, "timeDef");
		DebugLocation(204, 1);
		try
		{
			// FlashTeaseScript.g:205:2: ( 'time:random(' timeRange ')' | 'time:' timeValue -> ^( MIN timeValue ) )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==77))
			{
				alt21 = 1;
			}
			else if ((LA21_0==76))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:205:4: 'time:random(' timeRange ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(205, 18);
				string_literal108=(CommonToken)Match(input,77,Follow._77_in_timeDef987); 
				DebugLocation(205, 20);
				PushFollow(Follow._timeRange_in_timeDef990);
				timeRange109=timeRange();
				PopFollow();

				adaptor.AddChild(root_0, timeRange109.Tree);
				DebugLocation(205, 33);
				char_literal110=(CommonToken)Match(input,41,Follow._41_in_timeDef992); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:206:4: 'time:' timeValue
				{
				DebugLocation(206, 4);
				string_literal111=(CommonToken)Match(input,76,Follow._76_in_timeDef998);  
				stream_76.Add(string_literal111);

				DebugLocation(206, 12);
				PushFollow(Follow._timeValue_in_timeDef1000);
				timeValue112=timeValue();
				PopFollow();

				stream_timeValue.Add(timeValue112.Tree);


				{
				// AST REWRITE
				// elements: timeValue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 207:3: -> ^( MIN timeValue )
				{
					DebugLocation(207, 6);
					// FlashTeaseScript.g:207:6: ^( MIN timeValue )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(207, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MIN, "MIN"), root_1);

					DebugLocation(207, 12);
					adaptor.AddChild(root_1, stream_timeValue.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timeDef", 26);
			LeaveRule("timeDef", 26);
			LeaveRule_timeDef();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "timeDef"); }
		return retval;

	}
	// $ANTLR end "timeDef"

	private sealed partial class timeRange_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timeRange_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_timeRange();
	partial void LeaveRule_timeRange();

	// $ANTLR start "timeRange"
	// FlashTeaseScript.g:210:1: timeRange : MIN ':' timeValue ',' MAX ':' timeValue -> ^( MIN timeValue ) ^( MAX timeValue ) ;
	[GrammarRule("timeRange")]
	private FlashTeaseScriptParser.timeRange_return timeRange()
	{
		EnterRule_timeRange();
		EnterRule("timeRange", 27);
		TraceIn("timeRange", 27);
		FlashTeaseScriptParser.timeRange_return retval = new FlashTeaseScriptParser.timeRange_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MIN113 = default(CommonToken);
		CommonToken char_literal114 = default(CommonToken);
		CommonToken char_literal116 = default(CommonToken);
		CommonToken MAX117 = default(CommonToken);
		CommonToken char_literal118 = default(CommonToken);
		FlashTeaseScriptParser.timeValue_return timeValue115 = default(FlashTeaseScriptParser.timeValue_return);
		FlashTeaseScriptParser.timeValue_return timeValue119 = default(FlashTeaseScriptParser.timeValue_return);

		CommonTree MIN113_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree MAX117_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleSubtreeStream stream_timeValue=new RewriteRuleSubtreeStream(adaptor,"rule timeValue");
		try { DebugEnterRule(GrammarFileName, "timeRange");
		DebugLocation(210, 1);
		try
		{
			// FlashTeaseScript.g:211:2: ( MIN ':' timeValue ',' MAX ':' timeValue -> ^( MIN timeValue ) ^( MAX timeValue ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:211:4: MIN ':' timeValue ',' MAX ':' timeValue
			{
			DebugLocation(211, 4);
			MIN113=(CommonToken)Match(input,MIN,Follow._MIN_in_timeRange1022);  
			stream_MIN.Add(MIN113);

			DebugLocation(211, 8);
			char_literal114=(CommonToken)Match(input,44,Follow._44_in_timeRange1024);  
			stream_44.Add(char_literal114);

			DebugLocation(211, 12);
			PushFollow(Follow._timeValue_in_timeRange1026);
			timeValue115=timeValue();
			PopFollow();

			stream_timeValue.Add(timeValue115.Tree);
			DebugLocation(211, 22);
			char_literal116=(CommonToken)Match(input,42,Follow._42_in_timeRange1028);  
			stream_42.Add(char_literal116);

			DebugLocation(211, 26);
			MAX117=(CommonToken)Match(input,MAX,Follow._MAX_in_timeRange1030);  
			stream_MAX.Add(MAX117);

			DebugLocation(211, 30);
			char_literal118=(CommonToken)Match(input,44,Follow._44_in_timeRange1032);  
			stream_44.Add(char_literal118);

			DebugLocation(211, 34);
			PushFollow(Follow._timeValue_in_timeRange1034);
			timeValue119=timeValue();
			PopFollow();

			stream_timeValue.Add(timeValue119.Tree);


			{
			// AST REWRITE
			// elements: MIN, timeValue, MAX, timeValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:3: -> ^( MIN timeValue ) ^( MAX timeValue )
			{
				DebugLocation(212, 6);
				// FlashTeaseScript.g:212:6: ^( MIN timeValue )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MIN.NextNode(), root_1);

				DebugLocation(212, 12);
				adaptor.AddChild(root_1, stream_timeValue.NextTree());

				adaptor.AddChild(root_0, root_1);
				}
				DebugLocation(212, 23);
				// FlashTeaseScript.g:212:23: ^( MAX timeValue )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MAX.NextNode(), root_1);

				DebugLocation(212, 29);
				adaptor.AddChild(root_1, stream_timeValue.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timeRange", 27);
			LeaveRule("timeRange", 27);
			LeaveRule_timeRange();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "timeRange"); }
		return retval;

	}
	// $ANTLR end "timeRange"

	private sealed partial class timeValue_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timeValue_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_timeValue();
	partial void LeaveRule_timeValue();

	// $ANTLR start "timeValue"
	// FlashTeaseScript.g:215:1: timeValue : INTEGER ( timeUnit )? ;
	[GrammarRule("timeValue")]
	private FlashTeaseScriptParser.timeValue_return timeValue()
	{
		EnterRule_timeValue();
		EnterRule("timeValue", 28);
		TraceIn("timeValue", 28);
		FlashTeaseScriptParser.timeValue_return retval = new FlashTeaseScriptParser.timeValue_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INTEGER120 = default(CommonToken);
		FlashTeaseScriptParser.timeUnit_return timeUnit121 = default(FlashTeaseScriptParser.timeUnit_return);

		CommonTree INTEGER120_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "timeValue");
		DebugLocation(215, 1);
		try
		{
			// FlashTeaseScript.g:216:2: ( INTEGER ( timeUnit )? )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:216:4: INTEGER ( timeUnit )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(216, 4);
			INTEGER120=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_timeValue1062); 
			INTEGER120_tree = (CommonTree)adaptor.Create(INTEGER120);
			adaptor.AddChild(root_0, INTEGER120_tree);

			DebugLocation(216, 12);
			// FlashTeaseScript.g:216:12: ( timeUnit )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==MIN||LA22_0==54||LA22_0==64))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:216:12: timeUnit
				{
				DebugLocation(216, 12);
				PushFollow(Follow._timeUnit_in_timeValue1064);
				timeUnit121=timeUnit();
				PopFollow();

				adaptor.AddChild(root_0, timeUnit121.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timeValue", 28);
			LeaveRule("timeValue", 28);
			LeaveRule_timeValue();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "timeValue"); }
		return retval;

	}
	// $ANTLR end "timeValue"

	private sealed partial class timeUnit_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timeUnit_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_timeUnit();
	partial void LeaveRule_timeUnit();

	// $ANTLR start "timeUnit"
	// FlashTeaseScript.g:222:1: timeUnit : ( 'sec' | 'min' | 'hrs' );
	[GrammarRule("timeUnit")]
	private FlashTeaseScriptParser.timeUnit_return timeUnit()
	{
		EnterRule_timeUnit();
		EnterRule("timeUnit", 29);
		TraceIn("timeUnit", 29);
		FlashTeaseScriptParser.timeUnit_return retval = new FlashTeaseScriptParser.timeUnit_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set122 = default(CommonToken);

		CommonTree set122_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "timeUnit");
		DebugLocation(222, 1);
		try
		{
			// FlashTeaseScript.g:223:2: ( 'sec' | 'min' | 'hrs' )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(223, 2);
			set122=(CommonToken)input.LT(1);
			if (input.LA(1)==MIN||input.LA(1)==54||input.LA(1)==64)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set122));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timeUnit", 29);
			LeaveRule("timeUnit", 29);
			LeaveRule_timeUnit();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "timeUnit"); }
		return retval;

	}
	// $ANTLR end "timeUnit"

	private sealed partial class styleDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_styleDef();
	partial void LeaveRule_styleDef();

	// $ANTLR start "styleDef"
	// FlashTeaseScript.g:226:1: styleDef : ( ( 'style:normal' | 'style:\\'normal\\'' ) -> NORMAL | ( 'style:hidden' | 'style:\\'hidden\\'' ) -> HIDDEN | ( 'style:secret' | 'style:\\'secret\\'' ) -> SECRET );
	[GrammarRule("styleDef")]
	private FlashTeaseScriptParser.styleDef_return styleDef()
	{
		EnterRule_styleDef();
		EnterRule("styleDef", 30);
		TraceIn("styleDef", 30);
		FlashTeaseScriptParser.styleDef_return retval = new FlashTeaseScriptParser.styleDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal123 = default(CommonToken);
		CommonToken string_literal124 = default(CommonToken);
		CommonToken string_literal125 = default(CommonToken);
		CommonToken string_literal126 = default(CommonToken);
		CommonToken string_literal127 = default(CommonToken);
		CommonToken string_literal128 = default(CommonToken);

		CommonTree string_literal123_tree = default(CommonTree);
		CommonTree string_literal124_tree = default(CommonTree);
		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree string_literal126_tree = default(CommonTree);
		CommonTree string_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");

		try { DebugEnterRule(GrammarFileName, "styleDef");
		DebugLocation(226, 1);
		try
		{
			// FlashTeaseScript.g:227:2: ( ( 'style:normal' | 'style:\\'normal\\'' ) -> NORMAL | ( 'style:hidden' | 'style:\\'hidden\\'' ) -> HIDDEN | ( 'style:secret' | 'style:\\'secret\\'' ) -> SECRET )
			int alt26=3;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case 68:
			case 71:
				{
				alt26 = 1;
				}
				break;
			case 67:
			case 70:
				{
				alt26 = 2;
				}
				break;
			case 69:
			case 72:
				{
				alt26 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:227:4: ( 'style:normal' | 'style:\\'normal\\'' )
				{
				DebugLocation(227, 4);
				// FlashTeaseScript.g:227:4: ( 'style:normal' | 'style:\\'normal\\'' )
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==71))
				{
					alt23 = 1;
				}
				else if ((LA23_0==68))
				{
					alt23 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:227:5: 'style:normal'
					{
					DebugLocation(227, 5);
					string_literal123=(CommonToken)Match(input,71,Follow._71_in_styleDef1111);  
					stream_71.Add(string_literal123);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// FlashTeaseScript.g:227:22: 'style:\\'normal\\''
					{
					DebugLocation(227, 22);
					string_literal124=(CommonToken)Match(input,68,Follow._68_in_styleDef1115);  
					stream_68.Add(string_literal124);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:42: -> NORMAL
				{
					DebugLocation(227, 45);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(NORMAL, "NORMAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:228:4: ( 'style:hidden' | 'style:\\'hidden\\'' )
				{
				DebugLocation(228, 4);
				// FlashTeaseScript.g:228:4: ( 'style:hidden' | 'style:\\'hidden\\'' )
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==70))
				{
					alt24 = 1;
				}
				else if ((LA24_0==67))
				{
					alt24 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:228:5: 'style:hidden'
					{
					DebugLocation(228, 5);
					string_literal125=(CommonToken)Match(input,70,Follow._70_in_styleDef1126);  
					stream_70.Add(string_literal125);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// FlashTeaseScript.g:228:22: 'style:\\'hidden\\''
					{
					DebugLocation(228, 22);
					string_literal126=(CommonToken)Match(input,67,Follow._67_in_styleDef1130);  
					stream_67.Add(string_literal126);


					}
					break;

				}
				} finally { DebugExitSubRule(24); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 228:42: -> HIDDEN
				{
					DebugLocation(228, 45);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(HIDDEN, "HIDDEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FlashTeaseScript.g:229:4: ( 'style:secret' | 'style:\\'secret\\'' )
				{
				DebugLocation(229, 4);
				// FlashTeaseScript.g:229:4: ( 'style:secret' | 'style:\\'secret\\'' )
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==72))
				{
					alt25 = 1;
				}
				else if ((LA25_0==69))
				{
					alt25 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:229:5: 'style:secret'
					{
					DebugLocation(229, 5);
					string_literal127=(CommonToken)Match(input,72,Follow._72_in_styleDef1141);  
					stream_72.Add(string_literal127);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// FlashTeaseScript.g:229:22: 'style:\\'secret\\''
					{
					DebugLocation(229, 22);
					string_literal128=(CommonToken)Match(input,69,Follow._69_in_styleDef1145);  
					stream_69.Add(string_literal128);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 229:42: -> SECRET
				{
					DebugLocation(229, 45);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(SECRET, "SECRET"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleDef", 30);
			LeaveRule("styleDef", 30);
			LeaveRule_styleDef();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "styleDef"); }
		return retval;

	}
	// $ANTLR end "styleDef"

	private sealed partial class rangeDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public rangeDef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_rangeDef();
	partial void LeaveRule_rangeDef();

	// $ANTLR start "rangeDef"
	// FlashTeaseScript.g:238:1: rangeDef : ( 'range(' 'from:' INTEGER ',' 'to:' INTEGER ')' -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ) | 'range(' 'from:' INTEGER ',' 'to:' INTEGER ',' ( 'prefix' )? ( ':' )? QUOTED_STRING ')' -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX QUOTED_STRING ) ) );
	[GrammarRule("rangeDef")]
	private FlashTeaseScriptParser.rangeDef_return rangeDef()
	{
		EnterRule_rangeDef();
		EnterRule("rangeDef", 31);
		TraceIn("rangeDef", 31);
		FlashTeaseScriptParser.rangeDef_return retval = new FlashTeaseScriptParser.rangeDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal129 = default(CommonToken);
		CommonToken string_literal130 = default(CommonToken);
		CommonToken INTEGER131 = default(CommonToken);
		CommonToken char_literal132 = default(CommonToken);
		CommonToken string_literal133 = default(CommonToken);
		CommonToken INTEGER134 = default(CommonToken);
		CommonToken char_literal135 = default(CommonToken);
		CommonToken string_literal136 = default(CommonToken);
		CommonToken string_literal137 = default(CommonToken);
		CommonToken INTEGER138 = default(CommonToken);
		CommonToken char_literal139 = default(CommonToken);
		CommonToken string_literal140 = default(CommonToken);
		CommonToken INTEGER141 = default(CommonToken);
		CommonToken char_literal142 = default(CommonToken);
		CommonToken string_literal143 = default(CommonToken);
		CommonToken char_literal144 = default(CommonToken);
		CommonToken QUOTED_STRING145 = default(CommonToken);
		CommonToken char_literal146 = default(CommonToken);

		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree string_literal130_tree = default(CommonTree);
		CommonTree INTEGER131_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree string_literal133_tree = default(CommonTree);
		CommonTree INTEGER134_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree string_literal136_tree = default(CommonTree);
		CommonTree string_literal137_tree = default(CommonTree);
		CommonTree INTEGER138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree string_literal140_tree = default(CommonTree);
		CommonTree INTEGER141_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree QUOTED_STRING145_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");
		RewriteRuleITokenStream stream_INTEGER=new RewriteRuleITokenStream(adaptor,"token INTEGER");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_QUOTED_STRING=new RewriteRuleITokenStream(adaptor,"token QUOTED_STRING");

		try { DebugEnterRule(GrammarFileName, "rangeDef");
		DebugLocation(238, 1);
		try
		{
			// FlashTeaseScript.g:239:2: ( 'range(' 'from:' INTEGER ',' 'to:' INTEGER ')' -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ) | 'range(' 'from:' INTEGER ',' 'to:' INTEGER ',' ( 'prefix' )? ( ':' )? QUOTED_STRING ')' -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX QUOTED_STRING ) ) )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==63))
			{
				int LA29_1 = input.LA(2);

				if ((LA29_1==50))
				{
					int LA29_2 = input.LA(3);

					if ((LA29_2==INTEGER))
					{
						int LA29_3 = input.LA(4);

						if ((LA29_3==42))
						{
							int LA29_4 = input.LA(5);

							if ((LA29_4==78))
							{
								int LA29_5 = input.LA(6);

								if ((LA29_5==INTEGER))
								{
									int LA29_6 = input.LA(7);

									if ((LA29_6==41))
									{
										alt29 = 1;
									}
									else if ((LA29_6==42))
									{
										alt29 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 29, 6, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 29, 5, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 29, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 29, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 29, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:239:4: 'range(' 'from:' INTEGER ',' 'to:' INTEGER ')'
				{
				DebugLocation(239, 4);
				string_literal129=(CommonToken)Match(input,63,Follow._63_in_rangeDef1185);  
				stream_63.Add(string_literal129);

				DebugLocation(239, 13);
				string_literal130=(CommonToken)Match(input,50,Follow._50_in_rangeDef1187);  
				stream_50.Add(string_literal130);

				DebugLocation(239, 21);
				INTEGER131=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_rangeDef1189);  
				stream_INTEGER.Add(INTEGER131);

				DebugLocation(239, 29);
				char_literal132=(CommonToken)Match(input,42,Follow._42_in_rangeDef1191);  
				stream_42.Add(char_literal132);

				DebugLocation(239, 33);
				string_literal133=(CommonToken)Match(input,78,Follow._78_in_rangeDef1193);  
				stream_78.Add(string_literal133);

				DebugLocation(239, 39);
				INTEGER134=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_rangeDef1195);  
				stream_INTEGER.Add(INTEGER134);

				DebugLocation(239, 47);
				char_literal135=(CommonToken)Match(input,41,Follow._41_in_rangeDef1197);  
				stream_41.Add(char_literal135);



				{
				// AST REWRITE
				// elements: INTEGER, INTEGER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:3: -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) )
				{
					DebugLocation(240, 6);
					// FlashTeaseScript.g:240:6: ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RANGE, "RANGE"), root_1);

					DebugLocation(240, 14);
					// FlashTeaseScript.g:240:14: ^( FROM INTEGER )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 16);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FROM, "FROM"), root_2);

					DebugLocation(240, 21);
					adaptor.AddChild(root_2, stream_INTEGER.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(240, 30);
					// FlashTeaseScript.g:240:30: ^( TO INTEGER )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 32);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TO, "TO"), root_2);

					DebugLocation(240, 35);
					adaptor.AddChild(root_2, stream_INTEGER.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FlashTeaseScript.g:241:4: 'range(' 'from:' INTEGER ',' 'to:' INTEGER ',' ( 'prefix' )? ( ':' )? QUOTED_STRING ')'
				{
				DebugLocation(241, 4);
				string_literal136=(CommonToken)Match(input,63,Follow._63_in_rangeDef1223);  
				stream_63.Add(string_literal136);

				DebugLocation(241, 13);
				string_literal137=(CommonToken)Match(input,50,Follow._50_in_rangeDef1225);  
				stream_50.Add(string_literal137);

				DebugLocation(241, 21);
				INTEGER138=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_rangeDef1227);  
				stream_INTEGER.Add(INTEGER138);

				DebugLocation(241, 29);
				char_literal139=(CommonToken)Match(input,42,Follow._42_in_rangeDef1229);  
				stream_42.Add(char_literal139);

				DebugLocation(241, 33);
				string_literal140=(CommonToken)Match(input,78,Follow._78_in_rangeDef1231);  
				stream_78.Add(string_literal140);

				DebugLocation(241, 39);
				INTEGER141=(CommonToken)Match(input,INTEGER,Follow._INTEGER_in_rangeDef1233);  
				stream_INTEGER.Add(INTEGER141);

				DebugLocation(241, 47);
				char_literal142=(CommonToken)Match(input,42,Follow._42_in_rangeDef1235);  
				stream_42.Add(char_literal142);

				DebugLocation(241, 51);
				// FlashTeaseScript.g:241:51: ( 'prefix' )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==62))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:241:51: 'prefix'
					{
					DebugLocation(241, 51);
					string_literal143=(CommonToken)Match(input,62,Follow._62_in_rangeDef1237);  
					stream_62.Add(string_literal143);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(241, 61);
				// FlashTeaseScript.g:241:61: ( ':' )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==44))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:241:61: ':'
					{
					DebugLocation(241, 61);
					char_literal144=(CommonToken)Match(input,44,Follow._44_in_rangeDef1240);  
					stream_44.Add(char_literal144);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(241, 66);
				QUOTED_STRING145=(CommonToken)Match(input,QUOTED_STRING,Follow._QUOTED_STRING_in_rangeDef1243);  
				stream_QUOTED_STRING.Add(QUOTED_STRING145);

				DebugLocation(241, 80);
				char_literal146=(CommonToken)Match(input,41,Follow._41_in_rangeDef1245);  
				stream_41.Add(char_literal146);



				{
				// AST REWRITE
				// elements: INTEGER, INTEGER, QUOTED_STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:3: -> ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX QUOTED_STRING ) )
				{
					DebugLocation(242, 6);
					// FlashTeaseScript.g:242:6: ^( RANGE ^( FROM INTEGER ) ^( TO INTEGER ) ^( PREFIX QUOTED_STRING ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RANGE, "RANGE"), root_1);

					DebugLocation(242, 14);
					// FlashTeaseScript.g:242:14: ^( FROM INTEGER )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 16);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FROM, "FROM"), root_2);

					DebugLocation(242, 21);
					adaptor.AddChild(root_2, stream_INTEGER.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(242, 30);
					// FlashTeaseScript.g:242:30: ^( TO INTEGER )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 32);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TO, "TO"), root_2);

					DebugLocation(242, 35);
					adaptor.AddChild(root_2, stream_INTEGER.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(242, 44);
					// FlashTeaseScript.g:242:44: ^( PREFIX QUOTED_STRING )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 46);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PREFIX, "PREFIX"), root_2);

					DebugLocation(242, 53);
					adaptor.AddChild(root_2, stream_QUOTED_STRING.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rangeDef", 31);
			LeaveRule("rangeDef", 31);
			LeaveRule_rangeDef();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "rangeDef"); }
		return retval;

	}
	// $ANTLR end "rangeDef"

	private sealed partial class pageRef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageRef_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageRef();
	partial void LeaveRule_pageRef();

	// $ANTLR start "pageRef"
	// FlashTeaseScript.g:246:1: pageRef : pageId ( '#' )? -> ^( ID pageId ) ;
	[GrammarRule("pageRef")]
	private FlashTeaseScriptParser.pageRef_return pageRef()
	{
		EnterRule_pageRef();
		EnterRule("pageRef", 32);
		TraceIn("pageRef", 32);
		FlashTeaseScriptParser.pageRef_return retval = new FlashTeaseScriptParser.pageRef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal148 = default(CommonToken);
		FlashTeaseScriptParser.pageId_return pageId147 = default(FlashTeaseScriptParser.pageId_return);

		CommonTree char_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_pageId=new RewriteRuleSubtreeStream(adaptor,"rule pageId");
		try { DebugEnterRule(GrammarFileName, "pageRef");
		DebugLocation(246, 1);
		try
		{
			// FlashTeaseScript.g:247:2: ( pageId ( '#' )? -> ^( ID pageId ) )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:247:4: pageId ( '#' )?
			{
			DebugLocation(247, 4);
			PushFollow(Follow._pageId_in_pageRef1284);
			pageId147=pageId();
			PopFollow();

			stream_pageId.Add(pageId147.Tree);
			DebugLocation(247, 11);
			// FlashTeaseScript.g:247:11: ( '#' )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==40))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// FlashTeaseScript.g:247:11: '#'
				{
				DebugLocation(247, 11);
				char_literal148=(CommonToken)Match(input,40,Follow._40_in_pageRef1286);  
				stream_40.Add(char_literal148);


				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: pageId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:3: -> ^( ID pageId )
			{
				DebugLocation(248, 6);
				// FlashTeaseScript.g:248:6: ^( ID pageId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ID, "ID"), root_1);

				DebugLocation(248, 11);
				adaptor.AddChild(root_1, stream_pageId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageRef", 32);
			LeaveRule("pageRef", 32);
			LeaveRule_pageRef();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "pageRef"); }
		return retval;

	}
	// $ANTLR end "pageRef"

	private sealed partial class pageId_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pageId_return(FlashTeaseScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(FlashTeaseScriptParser grammar);
	}

	partial void EnterRule_pageId();
	partial void LeaveRule_pageId();

	// $ANTLR start "pageId"
	// FlashTeaseScript.g:251:1: pageId : ( INTEGER | LETTERS )+ ;
	[GrammarRule("pageId")]
	private FlashTeaseScriptParser.pageId_return pageId()
	{
		EnterRule_pageId();
		EnterRule("pageId", 33);
		TraceIn("pageId", 33);
		FlashTeaseScriptParser.pageId_return retval = new FlashTeaseScriptParser.pageId_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set149 = default(CommonToken);

		CommonTree set149_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pageId");
		DebugLocation(251, 1);
		try
		{
			// FlashTeaseScript.g:252:2: ( ( INTEGER | LETTERS )+ )
			DebugEnterAlt(1);
			// FlashTeaseScript.g:252:4: ( INTEGER | LETTERS )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(252, 4);
			// FlashTeaseScript.g:252:4: ( INTEGER | LETTERS )+
			int cnt31=0;
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if (((LA31_0>=INTEGER && LA31_0<=LETTERS)))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// FlashTeaseScript.g:
					{
					DebugLocation(252, 4);
					set149=(CommonToken)input.LT(1);
					if ((input.LA(1)>=INTEGER && input.LA(1)<=LETTERS))
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set149));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt31 >= 1)
						goto loop31;

					EarlyExitException eee31 = new EarlyExitException( 31, input );
					DebugRecognitionException(eee31);
					throw eee31;
				}
				cnt31++;
			}
			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pageId", 33);
			LeaveRule("pageId", 33);
			LeaveRule_pageId();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "pageId"); }
		return retval;

	}
	// $ANTLR end "pageId"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _page_in_tease209 = new BitSet(new ulong[]{0x6002UL});
		public static readonly BitSet _pageRef_in_page221 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_page223 = new BitSet(new ulong[]{0x292420000000000UL,0x800UL});
		public static readonly BitSet _pageProperties_in_page225 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_page228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pageProp_in_pageProperties257 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_pageProperties260 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _pageProp_in_pageProperties262 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _textDef_in_pageProp283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionDef_in_pageProp299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_textDef310 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _QUOTED_STRING_in_textDef313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionPrefix_in_actionDef324 = new BitSet(new ulong[]{0x2429800000000002UL,0x58006UL});
		public static readonly BitSet _actionMult_in_actionDef328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionHorVert_in_actionDef332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionPic_in_actionDef336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionSound_in_actionDef340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionGo_in_actionDef344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionYn_in_actionDef348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionDelay_in_actionDef352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionButtons_in_actionDef356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionUnset_in_actionDef360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionSet_in_actionDef364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_actionMult377 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _actionDef_in_actionMult379 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_actionMult382 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _actionDef_in_actionMult384 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _41_in_actionMult388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_actionHorVert407 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _actionDef_in_actionHorVert409 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_actionHorVert412 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _actionDef_in_actionHorVert414 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _41_in_actionHorVert418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_actionHorVert431 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _actionDef_in_actionHorVert433 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_actionHorVert436 = new BitSet(new ulong[]{0x292400000000000UL,0x800UL});
		public static readonly BitSet _actionDef_in_actionHorVert438 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _41_in_actionHorVert442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_actionPrefix461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_actionPrefix466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_actionPrefix471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_actionPrefix476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_actionPrefix481 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0x7FFFFUL});
		public static readonly BitSet _set_in_actionPrefix495 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0x7FFFFUL});
		public static readonly BitSet _44_in_actionPrefix502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_actionPic513 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _QUOTED_STRING_in_actionPic515 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionPic517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_actionSound539 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _QUOTED_STRING_in_actionSound541 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_actionSound544 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_actionSound546 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_actionSound548 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_actionSound550 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionSound554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_actionGo586 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _targetDef_in_actionGo588 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionGo590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_actionYn611 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _yesDef_in_actionYn613 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_actionYn615 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _noDef_in_actionYn617 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionYn619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_yesDef651 = new BitSet(new ulong[]{0x8000000000006000UL});
		public static readonly BitSet _pageRef_in_yesDef656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rangeDef_in_yesDef660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_noDef674 = new BitSet(new ulong[]{0x8000000000006000UL});
		public static readonly BitSet _pageRef_in_noDef679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rangeDef_in_noDef683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_actionDelay696 = new BitSet(new ulong[]{0x0UL,0x3000UL});
		public static readonly BitSet _timeDef_in_actionDelay698 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_actionDelay701 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _targetDef_in_actionDelay703 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_actionDelay708 = new BitSet(new ulong[]{0x0UL,0x1F8UL});
		public static readonly BitSet _styleDef_in_actionDelay710 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionDelay714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_actionButtons753 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _buttonSeq_in_actionButtons755 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionButtons757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _buttonDef_in_buttonSeq778 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_buttonSeq781 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _buttonDef_in_buttonSeq783 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _73_in_buttonDef803 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_buttonDef805 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_buttonDef807 = new BitSet(new ulong[]{0x80000006000UL});
		public static readonly BitSet _pageRef_in_buttonDef809 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_buttonDef811 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_buttonDef813 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_buttonDef815 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _QUOTED_STRING_in_buttonDef817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_actionUnset848 = new BitSet(new ulong[]{0x200000006000UL});
		public static readonly BitSet _actionList_in_actionUnset850 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionUnset852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_actionSet875 = new BitSet(new ulong[]{0x200000006000UL});
		public static readonly BitSet _actionList_in_actionSet877 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_actionSet879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _actionApply_in_actionList902 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_actionList905 = new BitSet(new ulong[]{0x200000006000UL});
		public static readonly BitSet _actionApply_in_actionList907 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _actionId_in_actionApply929 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_actionApply931 = new BitSet(new ulong[]{0x6000UL});
		public static readonly BitSet _pageRef_in_actionApply935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_actionId952 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_actionId954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_targetDef965 = new BitSet(new ulong[]{0x8000000000006000UL});
		public static readonly BitSet _pageRef_in_targetDef970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rangeDef_in_targetDef974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_timeDef987 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _timeRange_in_timeDef990 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_timeDef992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_timeDef998 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _timeValue_in_timeDef1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MIN_in_timeRange1022 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_timeRange1024 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _timeValue_in_timeRange1026 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_timeRange1028 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _MAX_in_timeRange1030 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_timeRange1032 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _timeValue_in_timeRange1034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_in_timeValue1062 = new BitSet(new ulong[]{0x40000000020002UL,0x1UL});
		public static readonly BitSet _timeUnit_in_timeValue1064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_timeUnit1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_styleDef1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_styleDef1115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_styleDef1126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_styleDef1130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_styleDef1141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_styleDef1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_rangeDef1185 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_rangeDef1187 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_rangeDef1189 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_rangeDef1191 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_rangeDef1193 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_rangeDef1195 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_rangeDef1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_rangeDef1223 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_rangeDef1225 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_rangeDef1227 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_rangeDef1229 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_rangeDef1231 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INTEGER_in_rangeDef1233 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_rangeDef1235 = new BitSet(new ulong[]{0x4000100002000000UL});
		public static readonly BitSet _62_in_rangeDef1237 = new BitSet(new ulong[]{0x100002000000UL});
		public static readonly BitSet _44_in_rangeDef1240 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _QUOTED_STRING_in_rangeDef1243 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_rangeDef1245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pageId_in_pageRef1284 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_pageRef1286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_pageId1309 = new BitSet(new ulong[]{0x6002UL});

	}
	#endregion Follow sets
}

} // namespace TeaseMe.MilovanaDownload
